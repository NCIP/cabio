
SQL*Plus: Release 10.2.0.1.0 - Production on Wed May 6 15:02:23 2009

Copyright (c) 1982, 2005, Oracle.  All rights reserved.


Connected to:
Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit Production
With the Partitioning, Data Mining and Real Application Testing options


Table truncated.


Table truncated.


Table truncated.


Table truncated.


Table truncated.


Table truncated.


Table truncated.


Table truncated.


Table truncated.


Table truncated.


Table truncated.


Table truncated.


Table truncated.


Table truncated.


Table truncated.


Table truncated.


Table truncated.

SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/indexer_new.sql gene_relative_location
SQL> rem -----------------------------------------------------------------------
> rem Filename:	indexer_new.sql
SQL> rem Purpose:	Script to generate drop and create index scripts
SQL> rem Notes:	Will build all non-sys/system indexes
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 300;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/indexer_new.sql marker_marker_rel_location
SQL> rem -----------------------------------------------------------------------
> rem Filename:	indexer_new.sql
SQL> rem Purpose:	Script to generate drop and create index scripts
SQL> rem Notes:	Will build all non-sys/system indexes
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 300;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/indexer_new.sql marker_relative_location
SQL> rem -----------------------------------------------------------------------
> rem Filename:	indexer_new.sql
SQL> rem Purpose:	Script to generate drop and create index scripts
SQL> rem Notes:	Will build all non-sys/system indexes
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 300;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/indexer_new.sql expression_reporter
SQL> rem -----------------------------------------------------------------------
> rem Filename:	indexer_new.sql
SQL> rem Purpose:	Script to generate drop and create index scripts
SQL> rem Notes:	Will build all non-sys/system indexes
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 300;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/indexer_new.sql expr_reporter_protein_domain
SQL> rem -----------------------------------------------------------------------
> rem Filename:	indexer_new.sql
SQL> rem Purpose:	Script to generate drop and create index scripts
SQL> rem Notes:	Will build all non-sys/system indexes
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 300;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/indexer_new.sql snp_reporter
SQL> rem -----------------------------------------------------------------------
> rem Filename:	indexer_new.sql
SQL> rem Purpose:	Script to generate drop and create index scripts
SQL> rem Notes:	Will build all non-sys/system indexes
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 300;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/indexer_new.sql exon_reporter_gene
SQL> rem -----------------------------------------------------------------------
> rem Filename:	indexer_new.sql
SQL> rem Purpose:	Script to generate drop and create index scripts
SQL> rem Notes:	Will build all non-sys/system indexes
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 300;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/indexer_new.sql exon_reporter
SQL> rem -----------------------------------------------------------------------
> rem Filename:	indexer_new.sql
SQL> rem Purpose:	Script to generate drop and create index scripts
SQL> rem Notes:	Will build all non-sys/system indexes
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 300;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/indexer_new.sql zstg_exon_reporter
SQL> rem -----------------------------------------------------------------------
> rem Filename:	indexer_new.sql
SQL> rem Purpose:	Script to generate drop and create index scripts
SQL> rem Notes:	Will build all non-sys/system indexes
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 300;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/indexer_new.sql exon
SQL> rem -----------------------------------------------------------------------
> rem Filename:	indexer_new.sql
SQL> rem Purpose:	Script to generate drop and create index scripts
SQL> rem Notes:	Will build all non-sys/system indexes
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 300;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/indexer_new.sql transcript_gene
SQL> rem -----------------------------------------------------------------------
> rem Filename:	indexer_new.sql
SQL> rem Purpose:	Script to generate drop and create index scripts
SQL> rem Notes:	Will build all non-sys/system indexes
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 300;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/indexer_new.sql transcript
SQL> rem -----------------------------------------------------------------------
> rem Filename:	indexer_new.sql
SQL> rem Purpose:	Script to generate drop and create index scripts
SQL> rem Notes:	Will build all non-sys/system indexes
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 300;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/indexer_new.sql microarray
SQL> rem -----------------------------------------------------------------------
> rem Filename:	indexer_new.sql
SQL> rem Purpose:	Script to generate drop and create index scripts
SQL> rem Notes:	Will build all non-sys/system indexes
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 300;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/indexer_new.sql zstg_expression_reporter
SQL> rem -----------------------------------------------------------------------
> rem Filename:	indexer_new.sql
SQL> rem Purpose:	Script to generate drop and create index scripts
SQL> rem Notes:	Will build all non-sys/system indexes
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 300;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/indexer_new.sql zstg_snp_reporter
SQL> rem -----------------------------------------------------------------------
> rem Filename:	indexer_new.sql
SQL> rem Purpose:	Script to generate drop and create index scripts
SQL> rem Notes:	Will build all non-sys/system indexes
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 300;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @constraint_scripts;
SQL> 
SQL> @$LOAD/constraints.sql protein_domain
SQL> rem -----------------------------------------------------------------------
> rem Filename:	constraints.sql
SQL> rem Purpose:	Script to spool a listing of all disable and enable constraints statements
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 800;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/constraints.sql gene_relative_location
SQL> rem -----------------------------------------------------------------------
> rem Filename:	constraints.sql
SQL> rem Purpose:	Script to spool a listing of all disable and enable constraints statements
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 800;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/constraints.sql marker_marker_rel_location
SQL> rem -----------------------------------------------------------------------
> rem Filename:	constraints.sql
SQL> rem Purpose:	Script to spool a listing of all disable and enable constraints statements
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 800;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/constraints.sql marker_relative_location
SQL> rem -----------------------------------------------------------------------
> rem Filename:	constraints.sql
SQL> rem Purpose:	Script to spool a listing of all disable and enable constraints statements
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 800;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/constraints.sql expression_reporter
SQL> rem -----------------------------------------------------------------------
> rem Filename:	constraints.sql
SQL> rem Purpose:	Script to spool a listing of all disable and enable constraints statements
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 800;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/constraints.sql expr_reporter_protein_domain
SQL> rem -----------------------------------------------------------------------
> rem Filename:	constraints.sql
SQL> rem Purpose:	Script to spool a listing of all disable and enable constraints statements
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 800;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/constraints.sql snp_reporter
SQL> rem -----------------------------------------------------------------------
> rem Filename:	constraints.sql
SQL> rem Purpose:	Script to spool a listing of all disable and enable constraints statements
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 800;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/constraints.sql exon_reporter_gene
SQL> rem -----------------------------------------------------------------------
> rem Filename:	constraints.sql
SQL> rem Purpose:	Script to spool a listing of all disable and enable constraints statements
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 800;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/constraints.sql exon_reporter
SQL> rem -----------------------------------------------------------------------
> rem Filename:	constraints.sql
SQL> rem Purpose:	Script to spool a listing of all disable and enable constraints statements
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 800;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/constraints.sql zstg_exon_reporter
SQL> rem -----------------------------------------------------------------------
> rem Filename:	constraints.sql
SQL> rem Purpose:	Script to spool a listing of all disable and enable constraints statements
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 800;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/constraints.sql exon
SQL> rem -----------------------------------------------------------------------
> rem Filename:	constraints.sql
SQL> rem Purpose:	Script to spool a listing of all disable and enable constraints statements
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 800;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/constraints.sql transcript_gene
SQL> rem -----------------------------------------------------------------------
> rem Filename:	constraints.sql
SQL> rem Purpose:	Script to spool a listing of all disable and enable constraints statements
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 800;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/constraints.sql transcript
SQL> rem -----------------------------------------------------------------------
> rem Filename:	constraints.sql
SQL> rem Purpose:	Script to spool a listing of all disable and enable constraints statements
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 800;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/constraints.sql microarray
SQL> rem -----------------------------------------------------------------------
> rem Filename:	constraints.sql
SQL> rem Purpose:	Script to spool a listing of all disable and enable constraints statements
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 800;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/constraints.sql zstg_expression_reporter
SQL> rem -----------------------------------------------------------------------
> rem Filename:	constraints.sql
SQL> rem Purpose:	Script to spool a listing of all disable and enable constraints statements
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 800;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/constraints.sql zstg_snp_reporter
SQL> rem -----------------------------------------------------------------------
> rem Filename:	constraints.sql
SQL> rem Purpose:	Script to spool a listing of all disable and enable constraints statements
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 800;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @disable_constraints;
SQL> 
SQL> @$LOAD/constraints/protein_domain.disable.sql;
SQL> 
SQL> alter table PROTEIN_DOMAIN disable constraint SYS_C004653;

Table altered.

SQL> alter table PROTEIN_DOMAIN disable constraint SYS_C004654;

Table altered.

SQL> alter table PROTEIN_DOMAIN disable constraint SYS_C004655;

Table altered.

SQL> alter table PROTEIN_DOMAIN disable constraint SYS_C004656;

Table altered.

SQL> alter table PROTEIN_DOMAIN disable constraint PDBIGID;

Table altered.

SQL> alter table PROTEIN_DOMAIN disable constraint SYS_C0021167;

Table altered.

SQL> 
SQL> alter table PROTEIN_DOMAIN disable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/gene_relative_location.disable.sql;
SQL> 
SQL> alter table GENE_RELATIVE_LOCATION disable constraint SYS_C0021104;

Table altered.

SQL> alter table GENE_RELATIVE_LOCATION disable constraint SYS_C004489;

Table altered.

SQL> alter table GENE_RELATIVE_LOCATION disable constraint SYS_C004490;

Table altered.

SQL> alter table GENE_RELATIVE_LOCATION disable constraint SYS_C004491;

Table altered.

SQL> alter table GENE_RELATIVE_LOCATION disable constraint SYS_C004492;

Table altered.

SQL> alter table GENE_RELATIVE_LOCATION disable constraint SYS_C004493;

Table altered.

SQL> alter table GENE_RELATIVE_LOCATION disable constraint SYS_C004494;

Table altered.

SQL> 
SQL> alter table GENE_RELATIVE_LOCATION disable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/marker_marker_rel_location.disable.sql;
SQL> 
SQL> alter table MARKER_MARKER_REL_LOCATION disable constraint SYS_C0021122;

Table altered.

SQL> alter table MARKER_MARKER_REL_LOCATION disable constraint SYS_C004593;

Table altered.

SQL> alter table MARKER_MARKER_REL_LOCATION disable constraint SYS_C004594;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/marker_relative_location.disable.sql;
SQL> 
SQL> alter table MARKER_RELATIVE_LOCATION disable constraint SYS_C0021123;

Table altered.

SQL> alter table MARKER_RELATIVE_LOCATION disable constraint SYS_C0016540;

Table altered.

SQL> alter table MARKER_RELATIVE_LOCATION disable constraint SYS_C0016541;

Table altered.

SQL> alter table MARKER_RELATIVE_LOCATION disable constraint SYS_C004595;

Table altered.

SQL> alter table MARKER_RELATIVE_LOCATION disable constraint SYS_C004596;

Table altered.

SQL> alter table MARKER_RELATIVE_LOCATION disable constraint SYS_C0016539;

Table altered.

SQL> 
SQL> alter table MARKER_RELATIVE_LOCATION disable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/expression_reporter.disable.sql;
SQL> 
SQL> alter table EXPRESSION_REPORTER disable constraint SYS_C0021093;

Table altered.

SQL> alter table EXPRESSION_REPORTER disable constraint SYS_C004434;

Table altered.

SQL> alter table EXPRESSION_REPORTER disable constraint SYS_C004435;

Table altered.

SQL> alter table EXPRESSION_REPORTER disable constraint SYS_C004436;

Table altered.

SQL> alter table EXPRESSION_REPORTER disable constraint EXPRREPBIGID;

Table altered.

SQL> 
SQL> alter table EXPRESSION_REPORTER disable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/zstg_expression_reporter.disable.sql;
SQL> 
SQL> alter table ZSTG_EXPRESSION_REPORTER disable constraint SYS_C004897;

Table altered.

SQL> alter table ZSTG_EXPRESSION_REPORTER disable constraint SYS_C004898;

Table altered.

SQL> alter table ZSTG_EXPRESSION_REPORTER disable constraint SYS_C004899;

Table altered.

SQL> 
SQL> alter table ZSTG_EXPRESSION_REPORTER disable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/expr_reporter_protein_domain.disable.sql;
SQL> 
SQL> alter table EXPR_REPORTER_PROTEIN_DOMAIN disable constraint SYS_C004439;

Table altered.

SQL> alter table EXPR_REPORTER_PROTEIN_DOMAIN disable constraint SYS_C004440;

Table altered.

SQL> 
SQL> alter table EXPR_REPORTER_PROTEIN_DOMAIN disable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/snp_reporter.disable.sql;
SQL> 
SQL> alter table SNP_REPORTER disable constraint SYS_C0021185;

Table altered.

SQL> alter table SNP_REPORTER disable constraint SYS_C004740;

Table altered.

SQL> alter table SNP_REPORTER disable constraint SYS_C004741;

Table altered.

SQL> alter table SNP_REPORTER disable constraint SYS_C004742;

Table altered.

SQL> alter table SNP_REPORTER disable constraint SNPREPBIGID;

Table altered.

SQL> 
SQL> alter table SNP_REPORTER disable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/zstg_snp_reporter.disable.sql;
SQL> 
SQL> alter table ZSTG_SNP_REPORTER disable constraint SYS_C005239;

Table altered.

SQL> alter table ZSTG_SNP_REPORTER disable constraint SYS_C005240;

Table altered.

SQL> alter table ZSTG_SNP_REPORTER disable constraint SYS_C005241;

Table altered.

SQL> 
SQL> alter table ZSTG_SNP_REPORTER disable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/exon_reporter_gene.disable.sql;
SQL> 
SQL> alter table EXON_REPORTER_GENE disable constraint SYS_C004432;

Table altered.

SQL> alter table EXON_REPORTER_GENE disable constraint SYS_C004433;

Table altered.

SQL> 
SQL> alter table EXON_REPORTER_GENE disable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/exon_reporter.disable.sql;
SQL> 
SQL> alter table EXON_REPORTER disable constraint XONREPORTER;

Table altered.

SQL> alter table EXON_REPORTER disable constraint SYS_C0021092;

Table altered.

SQL> alter table EXON_REPORTER disable constraint SYS_C004422;

Table altered.

SQL> alter table EXON_REPORTER disable constraint SYS_C004423;

Table altered.

SQL> alter table EXON_REPORTER disable constraint SYS_C004424;

Table altered.

SQL> alter table EXON_REPORTER disable constraint SYS_C004425;

Table altered.

SQL> alter table EXON_REPORTER disable constraint SYS_C004426;

Table altered.

SQL> alter table EXON_REPORTER disable constraint SYS_C004427;

Table altered.

SQL> alter table EXON_REPORTER disable constraint SYS_C004428;

Table altered.

SQL> alter table EXON_REPORTER disable constraint SYS_C004429;

Table altered.

SQL> 
SQL> alter table EXON_REPORTER disable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/zstg_exon_reporter.disable.sql;
SQL> 
SQL> alter table ZSTG_EXON_REPORTER disable constraint SYS_C004883;

Table altered.

SQL> alter table ZSTG_EXON_REPORTER disable constraint SYS_C004884;

Table altered.

SQL> alter table ZSTG_EXON_REPORTER disable constraint SYS_C004885;

Table altered.

SQL> alter table ZSTG_EXON_REPORTER disable constraint SYS_C004886;

Table altered.

SQL> alter table ZSTG_EXON_REPORTER disable constraint SYS_C004887;

Table altered.

SQL> alter table ZSTG_EXON_REPORTER disable constraint SYS_C004888;

Table altered.

SQL> alter table ZSTG_EXON_REPORTER disable constraint SYS_C004889;

Table altered.

SQL> alter table ZSTG_EXON_REPORTER disable constraint SYS_C004890;

Table altered.

SQL> alter table ZSTG_EXON_REPORTER disable constraint SYS_C004892;

Table altered.

SQL> 
SQL> alter table ZSTG_EXON_REPORTER disable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/exon.disable.sql;
SQL> 
SQL> alter table EXON disable constraint SYS_C0021091;

Table altered.

SQL> alter table EXON disable constraint SYS_C004416;

Table altered.

SQL> alter table EXON disable constraint SYS_C004417;

Table altered.

SQL> alter table EXON disable constraint SYS_C004418;

Table altered.

SQL> alter table EXON disable constraint SYS_C004419;

Table altered.

SQL> alter table EXON disable constraint XONBIGID;

Table altered.

SQL> 
SQL> alter table EXON disable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/transcript_gene.disable.sql;
SQL> 
SQL> alter table TRANSCRIPT_GENE disable constraint SYS_C004811;

Table altered.

SQL> alter table TRANSCRIPT_GENE disable constraint SYS_C004812;

Table altered.

SQL> 
SQL> alter table TRANSCRIPT_GENE disable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/transcript.disable.sql;
SQL> 
SQL> alter table TRANSCRIPT disable constraint XSCRIPTBIGID;

Table altered.

SQL> alter table TRANSCRIPT disable constraint SYS_C0021192;

Table altered.

SQL> alter table TRANSCRIPT disable constraint SYS_C004798;

Table altered.

SQL> alter table TRANSCRIPT disable constraint SYS_C004799;

Table altered.

SQL> alter table TRANSCRIPT disable constraint SYS_C004800;

Table altered.

SQL> alter table TRANSCRIPT disable constraint SYS_C004801;

Table altered.

SQL> alter table TRANSCRIPT disable constraint SYS_C004802;

Table altered.

SQL> 
SQL> alter table TRANSCRIPT disable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/microarray.disable.sql;
SQL> 
SQL> alter table MICROARRAY disable constraint SYS_C0021124;

Table altered.

SQL> alter table MICROARRAY disable constraint SYS_C0016542;

Table altered.

SQL> alter table MICROARRAY disable constraint SYS_C0016543;

Table altered.

SQL> alter table MICROARRAY disable constraint SYS_C0016544;

Table altered.

SQL> alter table MICROARRAY disable constraint SYS_C004599;

Table altered.

SQL> alter table MICROARRAY disable constraint SYS_C004600;

Table altered.

SQL> alter table MICROARRAY disable constraint MABIGIDUNIQ;

Table altered.

SQL> 
SQL> alter table MICROARRAY disable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @drop_indexes;
SQL> 
SQL> @$LOAD/indexes/protein_domain.drop.sql;
SQL> 
SQL> drop index PROTEINAIN_BIG_ID_LWR;

Index dropped.

SQL> drop index PROTEINAIN_BIG_ID;

Index dropped.

SQL> drop index SYS_C0021167_IDX;

Index dropped.

SQL> drop index PROTEIN_MAIN_TYPE_LWR;

Index dropped.

SQL> drop index PROTEIN_MAIN_DESCRIPTIO_LWR;

Index dropped.

SQL> drop index PROTEIN_MAIN_ACCESSION__LWR;

Index dropped.

SQL> drop index PROTEIN_MAIN_TYPE;

Index dropped.

SQL> drop index PROTEIN_MAIN_DESCRIPTIO;

Index dropped.

SQL> drop index PROTEIN_MAIN_ACCESSION_;

Index dropped.

SQL> drop index PROTEIN_MAIN_ID;

Index dropped.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/gene_relative_location.drop.sql;
SQL> 
SQL> drop index GENE_REION_BIG_ID_LWR;

Index dropped.

SQL> drop index GENE_REION_BIG_ID;

Index dropped.

SQL> drop index SYS_C0021104_IDX;

Index dropped.

SQL> drop index GENE_RELTION_TYPE_LWR;

Index dropped.

SQL> drop index GENE_RELTION_PROBE_SET__LWR;

Index dropped.

SQL> drop index GENE_RELTION_DISTANCE_LWR;

Index dropped.

SQL> drop index GENE_RELTION_ORIENTATIO_LWR;

Index dropped.

SQL> drop index GENE_RELTION_TYPE;

Index dropped.

SQL> drop index GENE_RELTION_PROBE_SET_;

Index dropped.

SQL> drop index GENE_RELTION_SNP_ID;

Index dropped.

SQL> drop index GENE_RELTION_GENE_ID;

Index dropped.

SQL> drop index GENE_RELTION_DISTANCE;

Index dropped.

SQL> drop index GENE_RELTION_ORIENTATIO;

Index dropped.

SQL> drop index GENE_RELTION_ID;

Index dropped.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/marker_marker_rel_location.drop.sql;
SQL> 
SQL> drop index SYS_C0021122_IDX;

Index dropped.

SQL> drop index MARKER_MTION_SORT_ORDER;

Index dropped.

SQL> drop index MARKER_MTION_MARKER_REL;

Index dropped.

SQL> drop index MARKER_MTION_MARKER_ID;

Index dropped.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/marker_relative_location.drop.sql;
SQL> 
SQL> drop index MARKER_ION_BIG_ID_LWR;

Index dropped.

SQL> drop index MARKER_ION_BIG_ID;

Index dropped.

SQL> drop index SYS_C0021123_IDX;

Index dropped.

SQL> drop index MARKER_RTION_PROBE_SET__LWR;

Index dropped.

SQL> drop index MARKER_RTION_DISTANCE_LWR;

Index dropped.

SQL> drop index MARKER_RTION_ORIENTATIO_LWR;

Index dropped.

SQL> drop index MARKER_RTION_TYPE_LWR;

Index dropped.

SQL> drop index MARKER_RTION_PROBE_SET_;

Index dropped.

SQL> drop index MARKER_RTION_SNP_ID;

Index dropped.

SQL> drop index MARKER_RTION_DISTANCE;

Index dropped.

SQL> drop index MARKER_RTION_ORIENTATIO;

Index dropped.

SQL> drop index MARKER_RTION_ID;

Index dropped.

SQL> drop index MARKER_RTION_TYPE;

Index dropped.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/expression_reporter.drop.sql;
SQL> 
SQL> drop index EXPRESSTER_BIG_ID_LWR;

Index dropped.

SQL> drop index EXPRESSTER_BIG_ID;

Index dropped.

SQL> drop index SYS_C0021093_IDX;

Index dropped.

SQL> drop index EXPRESSIRTER_TARGET_DES_LWR;

Index dropped.

SQL> drop index EXPRESSIRTER_TRANSCRIPT_LWR;

Index dropped.

SQL> drop index EXPRESSIRTER_SEQUENCE_S_LWR;

Index dropped.

SQL> drop index EXPRESSIRTER_SEQUENCE_T_LWR;

Index dropped.

SQL> drop index EXPRESSIRTER_NAME_LWR;

Index dropped.

SQL> drop index EXPRESSIRTER_NAS_ID;

Index dropped.

SQL> drop index EXPRESSIRTER_GENE_ID;

Index dropped.

SQL> drop index EXPRESSIRTER_TARGET_DES;

Index dropped.

SQL> drop index EXPRESSIRTER_TRANSCRIPT;

Index dropped.

SQL> drop index EXPRESSIRTER_SEQUENCE_S;

Index dropped.

SQL> drop index EXPRESSIRTER_SEQUENCE_T;

Index dropped.

SQL> drop index EXPRESSIRTER_MICROARRAY;

Index dropped.

SQL> drop index EXPRESSIRTER_NAME;

Index dropped.

SQL> drop index EXPRESSIRTER_ID;

Index dropped.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/zstg_expression_reporter.drop.sql;
SQL> 
SQL> drop index ZSTG_EXPRTER_ASSEMBLY;

Index dropped.

SQL> drop index ZSTG_EXPRTER_CYTO_STOP;

Index dropped.

SQL> drop index ZSTG_EXPRTER_CYTO_START;

Index dropped.

SQL> drop index ZSTG_EXPRTER_CHR_STOP;

Index dropped.

SQL> drop index ZSTG_EXPRTER_CHR_START;

Index dropped.

SQL> drop index ZSTG_EXPRTER_CHROMOSOME;

Index dropped.

SQL> drop index ZSTG_EXPRTER_NAS_ID;

Index dropped.

SQL> drop index ZSTG_EXPRTER_GENE_ID;

Index dropped.

SQL> drop index ZSTG_EXPRTER_TARGET_DES;

Index dropped.

SQL> drop index ZSTG_EXPRTER_TRANSCRIPT;

Index dropped.

SQL> drop index ZSTG_EXPRTER_SEQUENCE_S;

Index dropped.

SQL> drop index ZSTG_EXPRTER_SEQUENCE_T;

Index dropped.

SQL> drop index ZSTG_EXPRTER_MICROARRAY;

Index dropped.

SQL> drop index ZSTG_EXPRTER_ID;

Index dropped.

SQL> drop index ER_NAME_INDEX;

Index dropped.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/expr_reporter_protein_domain.drop.sql;
SQL> 
SQL> drop index EXPREPPROTDOMPK_IDX;

Index dropped.

SQL> drop index EXPR_REPMAIN_PROTEIN_DO;

Index dropped.

SQL> drop index EXPR_REPMAIN_EXPR_REPOR;

Index dropped.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/snp_reporter.drop.sql;
SQL> 
SQL> drop index SNP_REPTER_BIG_ID;

Index dropped.

SQL> drop index SYS_C0021185_IDX;

Index dropped.

SQL> drop index SNP_REPORTER_PHAST_CONS_LWR;

Index dropped.

SQL> drop index SNP_REPORTER_NAME_LWR;

Index dropped.

SQL> drop index SNP_REPORTER_PHAST_CONS;

Index dropped.

SQL> drop index SNP_REPORTER_SNP_ID;

Index dropped.

SQL> drop index SNP_REPORTER_MICROARRAY;

Index dropped.

SQL> drop index SNP_REPORTER_NAME;

Index dropped.

SQL> drop index SNP_REPORTER_ID;

Index dropped.

SQL> drop index SNP_REPTER_BIG_ID_LWR;

Index dropped.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/zstg_snp_reporter.drop.sql;
SQL> 
SQL> drop index ZSTG_SNPRTER_CYTO_STOP;

Index dropped.

SQL> drop index ZSTG_SNPRTER_CYTO_START;

Index dropped.

SQL> drop index ZSTG_SNPRTER_CHR_STOP;

Index dropped.

SQL> drop index ZSTG_SNPRTER_CHR_START;

Index dropped.

SQL> drop index ZSTG_SNPRTER_CHROMOSOME;

Index dropped.

SQL> drop index ZSTG_SNPRTER_PHAST_CONS;

Index dropped.

SQL> drop index ZSTG_SNPRTER_SNP_ID;

Index dropped.

SQL> drop index ZSTG_SNPRTER_MICROARRAY;

Index dropped.

SQL> drop index ZSTG_SNPRTER_NAME;

Index dropped.

SQL> drop index ZSTG_SNPRTER_ID;

Index dropped.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/exon_reporter_gene.drop.sql;
SQL> 
SQL> drop index SYS_C0016536_IDX;

Index dropped.

SQL> drop index EXON_REPGENE_GENE_ID;

Index dropped.

SQL> drop index EXON_REPGENE_EXON_REPOR;

Index dropped.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/exon_reporter.drop.sql;
SQL> 
SQL> drop index EXON_RETER_BIG_ID;

Index dropped.

SQL> drop index SYS_C0021092_IDX;

Index dropped.

SQL> drop index EXON_REPRTER_STRAND_LWR;

Index dropped.

SQL> drop index EXON_REPRTER_PROBE_COUN_LWR;

Index dropped.

SQL> drop index EXON_REPRTER_MANUFACTUR_LWR;

Index dropped.

SQL> drop index EXON_REPRTER_NAME_LWR;

Index dropped.

SQL> drop index EXON_REPRTER_EXON_ID;

Index dropped.

SQL> drop index EXON_REPRTER_STRAND;

Index dropped.

SQL> drop index EXON_REPRTER_PROBE_COUN;

Index dropped.

SQL> drop index EXON_REPRTER_MANUFACTUR;

Index dropped.

SQL> drop index EXON_REPRTER_MICROARRAY;

Index dropped.

SQL> drop index EXON_REPRTER_NAME;

Index dropped.

SQL> drop index EXON_REPRTER_ID;

Index dropped.

SQL> drop index ER_TI_INDEX;

Index dropped.

SQL> drop index EXON_RETER_BIG_ID_LWR;

Index dropped.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/zstg_exon_reporter.drop.sql;
SQL> 
SQL> drop index ZSTG_EXTER_BIG_ID_LWR;

Index dropped.

SQL> drop index ZSTG_EXTER_BIG_ID;

Index dropped.

SQL> drop index ZSTG_EXORTER_STOP_LOCAT;

Index dropped.

SQL> drop index ZSTG_EXORTER_START_LOCA;

Index dropped.

SQL> drop index ZSTG_EXORTER_CHROMOSOME;

Index dropped.

SQL> drop index ZSTG_EXORTER_EXON_ID;

Index dropped.

SQL> drop index ZSTG_EXORTER_TRANSCRIPT;

Index dropped.

SQL> drop index ZSTG_EXORTER_STRAND;

Index dropped.

SQL> drop index ZSTG_EXORTER_PROBE_COUN;

Index dropped.

SQL> drop index ZSTG_EXORTER_MANUFACTUR;

Index dropped.

SQL> drop index ZSTG_EXORTER_MICROARRAY;

Index dropped.

SQL> drop index ZSTG_EXORTER_NAME;

Index dropped.

SQL> drop index ZSTG_EXORTER_ID;

Index dropped.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/exon.drop.sql;
SQL> 
SQL> drop index EXONXON_BIG_ID;

Index dropped.

SQL> drop index SYS_C0021091_IDX;

Index dropped.

SQL> drop index EXONEXON_SOURCE_LWR;

Index dropped.

SQL> drop index EXONEXON_MANUFACTUR_LWR;

Index dropped.

SQL> drop index EXONEXON_TRANSCRIPT;

Index dropped.

SQL> drop index EXONEXON_SOURCE;

Index dropped.

SQL> drop index EXONEXON_ID;

Index dropped.

SQL> drop index EXON_MI_INDEX;

Index dropped.

SQL> drop index EXONXON_BIG_ID_LWR;

Index dropped.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/transcript_gene.drop.sql;
SQL> 
SQL> drop index TGPK_IDX;

Index dropped.

SQL> drop index TRANSCRIGENE_GENE_ID;

Index dropped.

SQL> drop index TG_TI_INDEX;

Index dropped.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/transcript.drop.sql;
SQL> 
SQL> drop index TRANSCRIPT_BIG_ID_LWR;

Index dropped.

SQL> drop index TRANSCRIPT_BIG_ID;

Index dropped.

SQL> drop index SYS_C0021192_IDX;

Index dropped.

SQL> drop index TRANSCRIRIPT_PROBE_COUN_LWR;

Index dropped.

SQL> drop index TRANSCRIRIPT_STRAND_LWR;

Index dropped.

SQL> drop index TRANSCRIRIPT_SOURCE_LWR;

Index dropped.

SQL> drop index TRANSCRIRIPT_MANUFACTUR_LWR;

Index dropped.

SQL> drop index TRANSCRIRIPT_PROBE_COUN;

Index dropped.

SQL> drop index TRANSCRIRIPT_STRAND;

Index dropped.

SQL> drop index TRANSCRIRIPT_SOURCE;

Index dropped.

SQL> drop index TRANSCRIRIPT_ID;

Index dropped.

SQL> drop index TRANSCRIPT_MI_INDEX;

Index dropped.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/microarray.drop.sql;
SQL> 
SQL> drop index MICROARRAY_BIG_ID_LWR;

Index dropped.

SQL> drop index MICROARRAY_BIG_ID;

Index dropped.

SQL> drop index SYS_C0021124_IDX;

Index dropped.

SQL> drop index MICROARRRRAY_LSID;

Index dropped.

SQL> drop index MICROARRRRAY_ACCESSION;

Index dropped.

SQL> drop index MICROARRRRAY_DESCRIPTIO;

Index dropped.

SQL> drop index MICROARRRRAY_TYPE;

Index dropped.

SQL> drop index MICROARRRRAY_PLATFORM;

Index dropped.

SQL> drop index MICROARRRRAY_DBSNP_VERS;

Index dropped.

SQL> drop index MICROARRRRAY_GENOME_VER;

Index dropped.

SQL> drop index MICROARRRRAY_ARRAY_NAME;

Index dropped.

SQL> drop index MICROARRRRAY_ID;

Index dropped.

SQL> drop index MICROARRRRAY_ANNOTATION;

Index dropped.

SQL> 
SQL> --EXIT;
SQL> --@$LOAD/indexes/array_reporter.drop.sql;
SQL> --@$LOAD/indexes/transcript_reporter.drop.sql;
SQL> -- drop indexes for loading
SQL> 
SQL> -- (re)create sequences
SQL> 
SQL> DROP SEQUENCE microarray_SEQ;

Sequence dropped.

SQL> DROP SEQUENCE REPORTER_SEQ;

Sequence dropped.

SQL> DROP SEQUENCE REL_LOCATION_SEQ;

Sequence dropped.

SQL> DROP SEQUENCE protein_domain_SEQ;

Sequence dropped.

SQL> DROP SEQUENCE FINAL_REP_SEQ;

Sequence dropped.

SQL> DROP SEQUENCE exon_ID_SEQ;

Sequence dropped.

SQL> DROP SEQUENCE XSCRIPT_ID_SEQ;

Sequence dropped.

SQL> CREATE SEQUENCE microarray_SEQ;

Sequence created.

SQL> CREATE SEQUENCE REPORTER_SEQ;

Sequence created.

SQL> CREATE SEQUENCE REL_LOCATION_SEQ;

Sequence created.

SQL> CREATE SEQUENCE protein_domain_SEQ;

Sequence created.

SQL> CREATE SEQUENCE FINAL_REP_SEQ;

Sequence created.

SQL> CREATE SEQUENCE exon_ID_SEQ;

Sequence created.

SQL> CREATE SEQUENCE XSCRIPT_ID_SEQ;

Sequence created.

SQL> 
SQL> ALTER TRIGGER SET_exon_ID ENABLE;

Trigger altered.

SQL> ALTER TRIGGER SET_XSCRIPT_ID ENABLE;

Trigger altered.

SQL> ALTER TRIGGER SET_PROTEIN_SEQ_ID ENABLE;

Trigger altered.

SQL> ALTER TRIGGER SET_EXPR_REP_ID ENABLE;

Trigger altered.

SQL> ALTER TRIGGER SET_SNP_REP_ID ENABLE;

Trigger altered.

SQL> ALTER TRIGGER SET_marker_REL_LOC_ID ENABLE;

Trigger altered.

SQL> ALTER TRIGGER SET_gene_REL_LOC_ID ENABLE;

Trigger altered.

SQL> 
SQL> -- create indexes on staging tables
SQL> -- done with array sql loader load
SQL> -- if you add an index here, remember to drop it in truncate_table_arrays.sql
SQL> -- Affy HGU-133 and HG-U133 Plus 2 arrays
SQL> 
SQL> INSERT
  2  INTO microarray (ID, ARRAY_NAME, ANNOTATION_DATE, GENOME_VERSION, PLATFORM, TYPE
  3  ,
  4    DESCRIPTION, ACCESSION, LSID) SELECT microarray_SEQ.NEXTVAL, geneCHIP_ARRAY,
  5  ANNO_DATE, GEN_VER, PLATFORM, TYPE, DESCRIPTION, ACCESSION, LSID FROM (SELECT
  6  DISTINCT DECODE(geneCHIP_ARRAY, 'Human Genome U133 Plus 2.0 Array',
  7  'HG-U133_Plus_2') AS geneCHIP_ARRAY, TO_DATE(ANNOTATION_DATE, 'MON DD, YYYY') AS
  8  ANNO_DATE, GENOME_VERSION AS GEN_VER, 'Affymetrix' AS PLATFORM, 'oligo' AS TYPE,
  9  'Human Genome U133 Plus 2.0 Array' AS DESCRIPTION, 'GPL570' AS ACCESSION,
 10  'URN:LSID:Affymetrix.com:PhysicalArrayDesign:HG-U133_Plus_2' AS LSID FROM
 11  zstg_rna_probesets Z
 12  								  WHERE ROWNUM = 1);

1 row created.

SQL> 
SQL> COMMIT;

Commit complete.

SQL> 
SQL> delete from zstg_rna_probesets_tmp where genechip_array = 'GeneChip Array';

0 rows deleted.

SQL> delete from zstg_rna_probesets_tmp x where x.GENECHIP_ARRAY = 'please see the bundled README file.';

1 row deleted.

SQL> commit;

Commit complete.

SQL> 
SQL> INSERT
  2  INTO microarray (ID, ARRAY_NAME, ANNOTATION_DATE, GENOME_VERSION, PLATFORM, TYPE
  3  ,
  4    DESCRIPTION, ACCESSION, LSID) SELECT microarray_SEQ.NEXTVAL, geneCHIP_ARRAY,
  5  ANNO_DATE, GEN_VER, PLATFORM, TYPE, DESCRIPTION, ACCESSION, LSID FROM (SELECT
  6  DISTINCT DECODE(geneCHIP_ARRAY, 'Human Genome U133A Array', 'HG-U133A',
  7  'Human Genome U133A 2.0 Array', 'HG-U133A_2', 'HT Human Genome U133A', 'HT_HG-U133A', 'Human Genome U133B Array', 'HG-U133B', 'Human Genome U95Av2 Array', 'HG_U95Av2', 'Human Genome U95B Array', 'HG_U95B') AS GENECHIP_ARRAY, TO_DATE(
  8  ANNOTATION_DATE, 'MON DD, YYYY') AS ANNO_DATE, GENOME_VERSION AS GEN_VER,
  9  'Affymetrix' AS PLATFORM, 'oligo' AS TYPE, geneCHIP_ARRAY AS DESCRIPTION, DECODE
 10  (geneCHIP_ARRAY, 'Human Genome U133A Array', 'GPL96',
 11  'Human Genome U133A 2.0 Array', 'GPL571', 'HT Human Genome U133A', 'GPL96', 'Human Genome U133B', 'GPL97') AS ACCESSION, DECODE(geneCHIP_ARRAY,
 12  'Human Genome U133A Array',
 13  'URN:LSID:Affymetrix.com:PhysicalArrayDesign:HG-U133A',
 14  'Human Genome U133A 2.0 Array',
 15  'URN:LSID:Affymetrix.com:PhysicalArrayDesign:HG-U133A_2',
 16  'HT Human Genome U133A',
 17  'URN:LSID:Affymetrix.com:PhysicalArrayDesign:HT_HG-U133A',
 18  'Human Genome U133B Array',
 19  'URN:LSID:Affymetrix.com:PhysicalArrayDesign:HG-U133B',
 20  'Human Genome U95B Array',
 21  'URN:LSID:Affymetrix.com:PhysicalArrayDesign:HG_U95B',
 22  'Human Genome U95Av2 Array',
 23  'URN:LSID:Affymetrix.com:PhysicalArrayDesign:HG_U95Av2'
 24   ) AS LSID FROM
 25  zstg_rna_probesets_tmp Z);

7 rows created.

SQL> 
SQL> COMMIT;

Commit complete.

SQL> 
SQL> ANALYZE TABLE ar_alignments COMPUTE STATISTICS;

Table analyzed.

SQL> ANALYZE TABLE ar_alignments_tmp COMPUTE STATISTICS;

Table analyzed.

SQL> 
SQL> ANALYZE TABLE ar_chromosomal_location COMPUTE STATISTICS;

Table analyzed.

SQL> ANALYZE TABLE ar_chromosomal_location_tmp COMPUTE STATISTICS;

Table analyzed.

SQL> 
SQL> ANALYZE TABLE zstg_rna_probesets COMPUTE STATISTICS;

Table analyzed.

SQL> ANALYZE TABLE zstg_rna_probesets_tmp COMPUTE STATISTICS;

Table analyzed.

SQL> 
SQL> INSERT
  2    INTO zstg_expression_reporter (ID, NAME, microarray_ID, sequence_type,
  3  SEQUENCE_source,
  4  transcript_ID, target_DESCRIPTION, gene_ID, nas_ID, chromosome_ID, CHR_START,
  5  CHR_STOP, CYTO_START,
  6  CYTO_STOP, ASSEMBLY) SELECT REPORTER_SEQ.NEXTVAL, PROBE_SET_ID, microarray_ID,
  7  SEQ_TYPE, SEQUENCE_source, transcript_ID, target_DESCRIPTION, GID, NID,
  8  chromosome_ID, START_POSITION, END_POSITION, CYTO_START, CYTO_STOP, ASSEMBLY
  9  		   FROM (SELECT DISTINCT Z.PROBE_SET_ID, Z.sequence_type AS SEQ_TYPE,
 10  Z.SEQUENCE_source, Z.transcript_ID, M.ID AS microarray_ID, Z.target_DESCRIPTION,
 11  G.gene_ID AS GID, N.ID AS NID, AL.chromosome_ID, AL.START_POSITION,
 12  AL.END_POSITION, AC.CYTO_START, AC.CYTO_STOP, AL.ASSEMBLY FROM
 13  zstg_rna_probesets Z, microarray M, ar_alignments AL, ar_chromosomal_location AC
 14  ,
 15    (SELECT CLUSTER_ID, gene_ID FROM gene_tv
 16  	 WHERE taxon_ID = 5) G, nucleic_acid_sequence N
 17   WHERE Z.UNIgene_ID = 'Hs.' || G.CLUSTER_ID (+) AND Z.REPRESENTATIVE_PUBLIC_ID
 18  = N.ACCESSION_NUMBER (+) AND Z.PROBE_SET_ID = AL.PROBE_SET_ID(+) AND
 19  Z.PROBE_SET_ID = AC.PROBE_SET_ID(+) AND Z.geneCHIP_ARRAY = M.DESCRIPTION AND
 20  Z.geneCHIP_ARRAY = AL.GENECHIP_ARRAY(+) AND Z.GENECHIP_ARRAY =
 21  AC.geneCHIP_ARRAY(+)
 22  UNION
 23  SELECT DISTINCT Z.PROBE_SET_ID, Z.sequence_type AS SEQ_TYPE, Z.SEQUENCE_source,
 24  Z.transcript_ID, M.ID AS microarray_ID, Z.target_DESCRIPTION, G.gene_ID AS GID,
 25  N.ID AS NID, AL.chromosome_ID, AL.START_POSITION, AL.END_POSITION, AC.CYTO_START
 26  ,
 27    AC.CYTO_STOP, AL.ASSEMBLY FROM zstg_rna_probesets_tmp Z, microarray M,
 28  ar_alignments_tmp AL, ar_chromosomal_location_tmp AC, (SELECT CLUSTER_ID,
 29  gene_ID FROM gene_tv
 30  			WHERE taxon_ID = 5) G, nucleic_acid_sequence N, chromosome C
 31   WHERE Z.UNIgene_ID = 'Hs.' || G.CLUSTER_ID (+) AND Z.REPRESENTATIVE_PUBLIC_ID
 32  = N.ACCESSION_NUMBER (+) AND Z.PROBE_SET_ID = AL.PROBE_SET_ID(+) AND
 33  Z.PROBE_SET_ID = AC.PROBE_SET_ID(+) AND Z.geneCHIP_ARRAY = M.DESCRIPTION AND
 34  Z.geneCHIP_ARRAY = AL.GENECHIP_ARRAY(+) AND Z.GENECHIP_ARRAY =
 35  AC.geneCHIP_ARRAY(+));

239879 rows created.

SQL> 
SQL> COMMIT;

Commit complete.

SQL> 
SQL> 
SQL> DROP INDEX ZSTG_EXPRREP_PROBESETIDX;
DROP INDEX ZSTG_EXPRREP_PROBESETIDX
           *
ERROR at line 1:
ORA-01418: specified index does not exist


SQL> 
SQL> INSERT
  2    INTO protein_domain (ACCESSION_NUMBER, DESCRIPTION, TYPE) SELECT DISTINCT
  3  ACCESSION_NUMBER, (SELECT DESCRIPTION FROM zstg_interpro
  4  WHERE ACCESSION_NUMBER = Z.ACCESSION_NUMBER AND ROWNUM = 1), 'InterPro' FROM (
  5  SELECT DISTINCT ACCESSION_NUMBER FROM zstg_interpro where description is not null) Z UNION SELECT DISTINCT
  6  ACCESSION_NUMBER, (SELECT DESCRIPTION FROM zstg_interpro_tmp
  7  WHERE ACCESSION_NUMBER = Z.ACCESSION_NUMBER AND ROWNUM = 1), 'InterPro' FROM (
  8  SELECT DISTINCT ACCESSION_NUMBER FROM zstg_interpro_tmp where description is not null) Z;

1272 rows created.

SQL> 
SQL> COMMIT;

Commit complete.

SQL> 
SQL> 
SQL> -- Affy HuMapping arrays
SQL> 
SQL> INSERT
  2   INTO microarray (ID, ARRAY_NAME, GENOME_VERSION, DBSNP_VERSION, PLATFORM, TYPE,
  3  DESCRIPTION, ACCESSION, LSID) SELECT microarray_SEQ.NEXTVAL, ARRAY_NAME,
  4  GENOME_VERSION, DB_SNP_VERSION, 'Affymetrix', 'snp', DESCRIPTION, ACCESSION, LSID FROM
  5  (SELECT DISTINCT ARRAY_NAME, GENOME_VERSION, DB_SNP_VERSION, DECODE(ARRAY_NAME,
  6  'Mapping250K_Nsp', 'Human Mapping 250K Nsp Array', 'Mapping250K_Sty',
  7  'Human Mapping 250K Sty Array', 'Mapping50K_Hind240',
  8  'Human Mapping 50K Array Hind 240', 'Mapping50K_Xba240',
  9  'Human Mapping 50K Array Xba 240') AS DESCRIPTION, DECODE(ARRAY_NAME,
 10  'Mapping250K_Nsp', 'GPL3718', 'Mapping250K_Sty', 'GPL3720', 'Mapping50K_Hind240'
 11  ,
 12    'GPL2004', 'Mapping50K_Xba240', 'GPL2005') AS ACCESSION, DECODE(ARRAY_NAME,
 13  'Mapping250K_Nsp', 'URN:LSID:Affymetrix.com:PhysicalArrayDesign:Mapping250K_Nsp',
 14    'Mapping250K_Sty',
 15  'URN:LSID:Affymetrix.com:PhysicalArrayDesign:Mapping250K_Sty',
 16    'Mapping50K_Hind240',
 17  'URN:LSID:Affymetrix.com:PhysicalArrayDesign:Mapping50K_Hind240',
 18    'Mapping50K_Xba240',
 19  'URN:LSID:Affymetrix.com:PhysicalArrayDesign:Mapping50K_Xba240'
 20  ) AS LSID FROM
 21  zstg_snp_affy Z);

4 rows created.

SQL> 
SQL> COMMIT;

Commit complete.

SQL> 
SQL> INSERT
  2  INTO zstg_snp_reporter(ID, NAME, SNP_ID, microarray_ID, chromosome_ID, CHR_START
  3  ,
  4    CHR_STOP, CYTO_START, CYTO_STOP) SELECT REPORTER_SEQ.NEXTVAL, PROBE_SET_ID,
  5  SNP_ID, ID, chromosome_ID, CHR_START, CHR_STOP, CYTO_START, CYTO_STOP FROM (
  6  SELECT DISTINCT Z.PROBE_SET_ID, S.ID AS SNP_ID, M.ID, C.chromosome_ID,
  7  Z.PHYSICAL_POSITION AS CHR_START, Z.PHYSICAL_POSITION AS CHR_STOP, Z.cytoband AS
  8  CYTO_START, Z.cytoband AS CYTO_STOP FROM zstg_snp_affy Z, snp_tv S, microarray M
  9  ,
 10    chromosome C
 11  WHERE Z.chromosome = C.CHROMOSOME_NUMBER(+) AND Z.DBSNP_RS_ID = S.DB_SNP_ID (+
 12  ) AND M.DESCRIPTION = DECODE(Z.ARRAY_NAME, 'Mapping250K_Nsp',
 13  'Human Mapping 250K Nsp Array', 'Mapping250K_Sty',
 14  'Human Mapping 250K Sty Array', 'Mapping50K_Hind240',
 15  'Human Mapping 50K Array Hind 240', 'Mapping50K_Xba240',
 16  'Human Mapping 50K Array Xba 240') AND C.taxon_ID = 5 UNION SELECT DISTINCT
 17  Z.PROBE_SET_ID, S.ID AS SNP_ID, M.ID, NULL AS chromosome_ID, NULL AS CHR_START,
 18  NULL AS CHR_STOP, NULL AS CYTO_START, NULL AS CYTO_STOP FROM zstg_snp_affy Z,
 19  snp_tv S, microarray M
 20  WHERE Z.DBSNP_RS_ID = S.DB_SNP_ID (+) AND M.DESCRIPTION = DECODE(Z.ARRAY_NAME,
 21  'Mapping250K_Nsp', 'Human Mapping 250K Nsp Array', 'Mapping250K_Sty',
 22  'Human Mapping 250K Sty Array', 'Mapping50K_Hind240',
 23  'Human Mapping 50K Array Hind 240', 'Mapping50K_Xba240',
 24  'Human Mapping 50K Array Xba 240'));

1231389 rows created.

SQL> 
SQL> COMMIT;

Commit complete.

SQL> 
SQL> 
SQL> ANALYZE TABLE zstg_snp_associated_gene COMPUTE STATISTICS;

Table analyzed.

SQL> ANALYZE TABLE zstg_snp_affy COMPUTE STATISTICS;

Table analyzed.

SQL> ANALYZE TABLE zstg_snp_illumina COMPUTE STATISTICS;

Table analyzed.

SQL> 
SQL> -- associated genes
SQL> INSERT
  2    INTO gene_relative_location (ORIENTATION, DISTANCE, GENE_ID, SNP_ID,
  3  PROBE_SET_ID, TYPE) SELECT DISTINCT TYPE, DISTANCE, gene_ID, SNP_ID,
  4  PROBE_SET_ID, TYPE_OLD FROM (SELECT DISTINCT DECODE(AG.ASSOCIATION_POSITION,
  5  'flanking_3UTR', 'downstream', 'flanking_5UTR', 'upstream', 'coding', 'CDS',
  6  AG.ASSOCIATION_POSITION) TYPE, MIN(AG.DISTANCE) DISTANCE, G.gene_ID, S.ID SNP_ID
  7  ,
  8    Z.PROBE_SET_ID, DECODE(AG.ASSOCIATION_POSITION, 'flanking_3UTR', 'downstream',
  9  'flanking_5UTR', 'upstream', 'coding', 'CDS', AG.ASSOCIATION_POSITION) TYPE_OLD
 10  	       FROM zstg_snp_associated_gene AG, zstg_snp_affy Z, gene_tv G, snp_tv S
 11  WHERE AG.PROBESET_ID = Z.PROBE_SET_ID AND AG.ASSOCIATED_gene_SYMBOL = G.SYMBOL
 12  AND G.taxon_ID = 5 AND Z.DBSNP_RS_ID = S.DB_SNP_ID
 13  		    GROUP BY AG.ASSOCIATION_POSITION, G.gene_ID, S.ID, Z.PROBE_SET_ID
 14  	     UNION
 15  	 SELECT DISTINCT DECODE(Z.LOCATION, 'flanking_3UTR', 'downstream',
 16  'flanking_5UTR', 'upstream', 'coding', 'CDS', Z.LOCATION) TYPE, DECODE(
 17  Z.LOCATION, 'coding', '0', '3UTR', '0', '5UTR', '0', 'UTR', '0',
 18  Z.LOCATION_RELATIVE_TO_gene) DISTANCE, G.GENE_ID GENE_ID, S.ID SNP_ID,
 19  Z.DBSNP_RS_ID PROBE_SET_ID, DECODE(Z.LOCATION, 'flanking_3UTR', 'downstream',
 20  'flanking_5UTR', 'upstream', 'coding', 'CDS', Z.LOCATION) TYPE_OLD FROM
 21  zstg_snp_illumina Z, gene_tv G, snp_tv S
 22  	  WHERE Z.gene_SYMBOL = G.SYMBOL AND G.taxon_ID = 5 AND Z.DBSNP_RS_ID =
 23  S.DB_SNP_ID);

1232652 rows created.

SQL> 
SQL> COMMIT;

Commit complete.

SQL> 
SQL> -- eliminate duplicates
SQL>  delete from gene_relative_location where ROWID NOT IN
  2   (select MIN(ROWID) from gene_relative_location GROUP BY GENE_ID, SNP_ID, DISTANCE, ORIENTATION);

50945 rows deleted.

SQL> 
SQL>  commit;

Commit complete.

SQL> 
SQL> -- Agilent 44K array
SQL> 
SQL> INSERT
  2   INTO microarray (ID, ARRAY_NAME, PLATFORM, TYPE, DESCRIPTION, ACCESSION) VALUES
  3  (microarray_SEQ.NEXTVAL, '014850_D', 'Agilent', 'oligo', 'Human Genome, Whole',
  4  'GPL4133');

1 row created.

SQL> COMMIT;

Commit complete.

SQL> 
SQL> ANALYZE TABLE zstg_rna_agilent COMPUTE STATISTICS;

Table analyzed.

SQL> 
SQL> INSERT
  2    INTO zstg_expression_reporter (ID, NAME, microarray_ID, gene_ID, nas_ID,
  3  chromosome_ID, CHR_START, CHR_STOP, CYTO_START, CYTO_STOP) SELECT
  4  REPORTER_SEQ.NEXTVAL, PROBE_SET_ID, microarray_SEQ.CURRVAL, gene_ID, ID,
  5  chromosome_ID, CHR_START, CHR_STOP, CYTO_START, CYTO_STOP FROM (SELECT DISTINCT
  6  Z.PROBE_SET_ID, G.gene_ID, N.ID, C.chromosome_ID, Z.CHR_START, Z.CHR_STOP,
  7  Z.CYTO_START, Z.CYTO_STOP FROM zstg_rna_agilent Z, chromosome C,
  8  nucleic_acid_sequence N, (SELECT CLUSTER_ID, gene_ID FROM gene_tv
  9  				WHERE taxon_ID = 5) G
 10  	  WHERE Z.UNIgene_ID = 'Hs.' || G.CLUSTER_ID (+) AND Z.chromosome_NUMBER =
 11  C.chromosome_NUMBER(+) AND C.taxon_ID = 5 AND Z.PRIMARY_ACCESSION =
 12  N.ACCESSION_NUMBER (+)
 13  UNION
 14  SELECT DISTINCT Z.PROBE_SET_ID, G.gene_ID, N.ID, NULL AS chromosome_ID,
 15  Z.CHR_START, Z.CHR_STOP, Z.CYTO_START, Z.CYTO_STOP FROM zstg_rna_agilent Z,
 16  nucleic_acid_sequence N, (SELECT CLUSTER_ID, gene_ID FROM gene_tv
 17  				WHERE taxon_ID = 5) G
 18   WHERE Z.UNIgene_ID = 'Hs.' || G.CLUSTER_ID (+) AND Z.PRIMARY_ACCESSION =
 19  N.ACCESSION_NUMBER (+)
 20  );

81324 rows created.

SQL> COMMIT;

Commit complete.

SQL> 
SQL> var microarray_id number;
SQL> SELECT microarray_SEQ.CURRVAL
  2    INTO :microarray_ID FROM DUAL;

   CURRVAL
----------
	13

1 row selected.

SQL> 
SQL> UPDATE zstg_expression_reporter E SET nas_ID = (
  2  SELECT N.ID FROM zstg_rna_agilent Z, nucleic_acid_sequence N
  3  WHERE E.NAME = Z.PROBE_SET_ID AND Z.GENBANK_ACCESSION = N.ACCESSION_NUMBER (+)
  4  )
  5   WHERE E.microarray_ID = MICROARRAY_ID AND E.nas_ID IS NULL;

59174 rows updated.

SQL> COMMIT;

Commit complete.

SQL> 
SQL> UPDATE zstg_expression_reporter E SET nas_ID = (SELECT N.ID FROM
  2  zstg_rna_agilent Z, nucleic_acid_sequence N
  3  WHERE E.NAME = Z.PROBE_SET_ID AND Z.REF_SEQ_ACCESSION = N.ACCESSION_NUMBER (+)
  4  )
  5   WHERE E.microarray_ID = MICROARRAY_ID AND E.nas_ID IS NULL;

56255 rows updated.

SQL> 
SQL> COMMIT;

Commit complete.

SQL> 
SQL> -- Agilent CGH 244K array
SQL> 
SQL> INSERT
  2   INTO microarray (ID, ARRAY_NAME, PLATFORM, TYPE, DESCRIPTION, ACCESSION) VALUES
  3  (microarray_SEQ.NEXTVAL, '014693_D', 'Agilent', 'oligo', 'Human Genome CGH 244A'
  4  ,
  5    'GPL4091');

1 row created.

SQL> COMMIT;

Commit complete.

SQL> SELECT microarray_SEQ.CURRVAL
  2    INTO :microarray_ID FROM DUAL;

   CURRVAL
----------
	14

1 row selected.

SQL> 
SQL> ANALYZE TABLE zstg_cgh_agilent COMPUTE STATISTICS;

Table analyzed.

SQL> 
SQL> INSERT
  2    INTO zstg_expression_reporter (ID, NAME, microarray_ID, gene_ID, nas_ID,
  3  chromosome_ID, CHR_START, CHR_STOP) SELECT REPORTER_SEQ.NEXTVAL, PROBE_SET_ID,
  4  microarray_SEQ.CURRVAL, gene_ID, ID, chromosome_ID, PROBE_START, PROBE_END FROM
  5  (SELECT DISTINCT Z.PROBE_SET_ID, G.gene_ID, N.ID, C.chromosome_ID, Z.PROBE_START
  6  ,
  7    Z.PROBE_END FROM zstg_cgh_agilent Z, chromosome C, (SELECT SYMBOL, MIN(gene_ID
  8  ) gene_ID FROM gene_tv
  9  							    WHERE taxon_ID = 5
 10  	 GROUP BY SYMBOL) G, (SELECT PROBE_SET_ID, ACCESSION FROM zstg_cgh_accessions
 11  					   WHERE IND = 0) A, nucleic_acid_sequence N
 12  WHERE Z.gene_SYMBOL = G.SYMBOL (+) AND Z.PROBE_SET_ID = A.PROBE_SET_ID (+) AND
 13  A.ACCESSION = N.ACCESSION_NUMBER (+) AND Z.chromosome_NUMBER =
 14  C.chromosome_NUMBER(+) AND C.taxon_ID = 5
 15  UNION
 16  SELECT DISTINCT Z.PROBE_SET_ID, G.gene_ID, N.ID, NULL AS chromosome_ID,
 17  Z.PROBE_START, Z.PROBE_END FROM zstg_cgh_agilent Z, (SELECT SYMBOL, MIN(gene_ID)
 18  gene_ID FROM gene_tv
 19  							   WHERE taxon_ID = 5
 20  	 GROUP BY SYMBOL) G, (SELECT PROBE_SET_ID, ACCESSION FROM zstg_cgh_accessions
 21  					   WHERE IND = 0) A, nucleic_acid_sequence N
 22   WHERE Z.gene_SYMBOL = G.SYMBOL(+) AND Z.PROBE_SET_ID = A.PROBE_SET_ID(+) AND
 23  A.ACCESSION = N.ACCESSION_NUMBER(+));

472545 rows created.

SQL> 
SQL> COMMIT;

Commit complete.

SQL> CREATE INDEX ER_NAME_INDEX ON zstg_expression_reporter(NAME) tablespace cabio_map_fut;

Index created.

SQL> 
SQL> UPDATE zstg_expression_reporter E SET nas_ID = (SELECT N.ID FROM
  2  zstg_cgh_accessions A, nucleic_acid_sequence N
  3   WHERE A.ACCESSION = N.ACCESSION_NUMBER AND A.PROBE_SET_ID = E.NAME AND ROWNUM
  4  = 1)
  5   WHERE E.microarray_ID = MICROARRAY_ID AND E.nas_ID IS NULL;

229922 rows updated.

SQL> 
SQL> COMMIT;

Commit complete.

SQL> 
SQL> -- Illumina 550K array
SQL> 
SQL> INSERT
  2    INTO microarray (ID, ARRAY_NAME, GENOME_VERSION, PLATFORM, TYPE, DESCRIPTION,
  3  ACCESSION, LSID) SELECT microarray_SEQ.NEXTVAL, 'HumanHap550Kv3', GENOME_BUILD,
  4  'Illumina', 'snp', 'HumanHap550 Genotyping BeadChip' AS DESCRIPTION, '' AS ACCESSION, 'URN:LSID:illumina.com:PhysicalArrayDesign:HumanHap550v3_A' as LSID FROM zstg_snp_illumina Z
  5  		 WHERE ROWNUM = 1;

1 row created.

SQL> COMMIT;

Commit complete.

SQL> SELECT microarray_SEQ.CURRVAL
  2    INTO :microarray_ID FROM DUAL;

   CURRVAL
----------
	15

1 row selected.

SQL> 
SQL> 
SQL> INSERT
  2    INTO zstg_snp_reporter(ID, NAME, microarray_ID, SNP_ID, PHAST_CONSERVATION,
  3  chromosome_ID, CHR_START, CHR_STOP) SELECT REPORTER_SEQ.NEXTVAL, DBSNP_RS_ID,
  4  microarray_SEQ.CURRVAL, ID, PHAST_CONSERVATION, chromosome_ID, CHR_START,
  5  CHR_STOP FROM (SELECT DISTINCT Z.DBSNP_RS_ID, S.ID, Z.PHAST_CONSERVATION,
  6  C.chromosome_ID, Z.COORDINATE AS CHR_START, Z.COORDINATE AS CHR_STOP FROM
  7  zstg_snp_illumina Z, chromosome C, snp_tv S
  8  WHERE Z.DBSNP_RS_ID = S.DB_SNP_ID (+) AND Z.chromosome = C.CHROMOSOME_NUMBER(+
  9  ) AND C.taxon_ID = 5 UNION SELECT DISTINCT Z.DBSNP_RS_ID, S.ID,
 10  Z.PHAST_CONSERVATION, NULL AS chromosome_ID, Z.COORDINATE AS CHR_START,
 11  Z.COORDINATE AS CHR_STOP FROM zstg_snp_illumina Z, snp_tv S
 12  				 WHERE Z.DBSNP_RS_ID = S.DB_SNP_ID (+));

1122579 rows created.

SQL> 
SQL> COMMIT;

Commit complete.

SQL> 
SQL> -- Affymetrix HuExon Array
SQL> 
SQL> INSERT
  2    INTO transcript (MANUFACTURER_ID, STRAND, PROBE_COUNT, source) SELECT DISTINCT
  3  transcript_CLUSTER_ID, STRAND, TOTAL_PROBES, 'Affymetrix' FROM
  4  zstg_exon_trans_affy;

337421 rows created.

SQL> COMMIT;

Commit complete.

SQL> ANALYZE TABLE transcript COMPUTE STATISTICS;

Table analyzed.

SQL> 
SQL> CREATE INDEX transcript_MI_INDEX ON TRANSCRIPT(MANUFACTURER_ID) tablespace cabio_fut;

Index created.

SQL> 
SQL> INSERT
  2    INTO exon (MANUFACTURER_ID, transcript_ID, source) SELECT EXON_ID, ID,
  3  'Affymetrix' FROM (SELECT DISTINCT Z.exon_ID, T.ID FROM zstg_exon_affy Z,
  4  transcript T
  5  			 WHERE Z.transcript_CLUSTER_ID = T.MANUFACTURER_ID);

1063087 rows created.

SQL> COMMIT;

Commit complete.

SQL> CREATE INDEX exon_MI_INDEX ON EXON(MANUFACTURER_ID) tablespace cabio_fut;

Index created.

SQL> 
SQL> INSERT
  2   INTO microarray (ID, ARRAY_NAME, PLATFORM, TYPE, DESCRIPTION, ACCESSION, LSID) SELECT
  3  microarray_SEQ.NEXTVAL, 'HuEx-1_0-st-v2', 'Affymetrix', 'exon',
  4  'Human Exon 1.0 ST Array', 'GPL5188','URN:LSID:Affymetrix.com:PhysicalArrayDesign:HuEx-1_0-st-v2'	FROM DUAL;

1 row created.

SQL> 
SQL> SELECT microarray_SEQ.CURRVAL
  2    INTO :microarray_ID FROM DUAL;

   CURRVAL
----------
	16

1 row selected.

SQL> 
SQL> INSERT
  2    INTO zstg_exon_reporter (ID, NAME, microarray_ID, MANUFACTURER_PSR_ID,
  3  PROBE_COUNT, STRAND, transcript_ID, exon_ID, chromosome_ID, START_LOCATION,
  4  STOP_LOCATION) SELECT REPORTER_SEQ.NEXTVAL, PROBE_SET_ID, microarray_SEQ.CURRVAL
  5  ,
  6    PSR_ID, PROBE_COUNT, STRAND, TRANS_ID, ID, chromosome_ID, START_LOCATION,
  7  STOP_LOCATION FROM (SELECT DISTINCT Z.PROBE_SET_ID, Z.PSR_ID, Z.PROBE_COUNT,
  8  Z.STRAND, T.ID AS TRANS_ID, E.ID, C.chromosome_ID, Z.START_LOCATION,
  9  Z.STOP_LOCATION FROM zstg_exon_affy Z, chromosome C, transcript T, EXON E
 10  		  WHERE Z.transcript_CLUSTER_ID = T.MANUFACTURER_ID AND Z.exon_ID =
 11  E.MANUFACTURER_ID AND SUBSTR(Z.SEQNAME, 4) = C.chromosome_NUMBER (+) AND
 12  C.taxon_ID = 5 UNION SELECT DISTINCT Z.PROBE_SET_ID, Z.PSR_ID, Z.PROBE_COUNT,
 13  Z.STRAND, T.ID, E.ID, NULL AS chromosome_ID, Z.START_LOCATION, Z.STOP_LOCATION
 14  			    FROM zstg_exon_affy Z, transcript T, EXON E
 15  		  WHERE Z.transcript_CLUSTER_ID = T.MANUFACTURER_ID AND Z.exon_ID =
 16  E.MANUFACTURER_ID);

2808822 rows created.

SQL> COMMIT;

Commit complete.

SQL> 
SQL> INSERT
  2    INTO exon_reporter (NAME, microarray_ID, MANUFACTURER_PSR_ID, PROBE_COUNT,
  3  STRAND, transcript_ID, exon_ID) SELECT DISTINCT NAME, microarray_ID,
  4  MANUFACTURER_PSR_ID, PROBE_COUNT, STRAND, transcript_ID, exon_ID FROM
  5  zstg_exon_reporter;

1404693 rows created.

SQL> COMMIT;

Commit complete.

SQL> 
SQL> CREATE INDEX ER_TI_INDEX ON exon_reporter(transcript_ID) tablespace cabio_fut;

Index created.

SQL> ANALYZE TABLE exon_reporter COMPUTE STATISTICS;

Table analyzed.

SQL> 
SQL> 
SQL> INSERT
  2    INTO transcript_gene SELECT T.ID, G.GENE_ID FROM ZSTG_exon_TRANS_GENES Z,
  3  transcript T, gene_tv G
  4  	  WHERE Z.UNIgene_ID = 'Hs.' || G.CLUSTER_ID AND Z.transcript_CLUSTER_ID =
  5  T.MANUFACTURER_ID;

41425 rows created.

SQL> COMMIT;

Commit complete.

SQL> CREATE INDEX TG_TI_INDEX ON transcript_gene(TRANSCRIPT_ID) tablespace cabio_fut;

Index created.

SQL> ANALYZE TABLE transcript_gene COMPUTE STATISTICS;

Table analyzed.

SQL> 
SQL> 
SQL> INSERT
  2  INTO exon_reporter_gene SELECT E.ID, TG.GENE_ID FROM exon_reporter E, transcript
  3  T, transcript_gene TG
  4  			  WHERE E.transcript_ID = T.ID AND T.ID = TG.TRANSCRIPT_ID;

1149514 rows created.

SQL> COMMIT;

Commit complete.

SQL> 
SQL> INSERT
  2    INTO expression_reporter (NAME, microarray_ID, sequence_type, SEQUENCE_source,
  3  transcript_ID, target_DESCRIPTION, gene_ID, nas_ID) SELECT DISTINCT NAME,
  4  microarray_ID, sequence_type, SEQUENCE_source, transcript_ID, target_DESCRIPTION
  5  ,
  6    gene_ID, nas_ID FROM zstg_expression_reporter;

469242 rows created.

SQL> COMMIT;

Commit complete.

SQL> 
SQL> INSERT
  2    INTO expr_reporter_protein_domain (EXPR_REPORTER_ID, protein_domain_ID) SELECT
  3  DISTINCT ER.ID, PD.ID FROM zstg_interpro Z, protein_domain PD,
  4  expression_reporter ER
  5  	WHERE Z.PROBE_SET_ID = ER.NAME AND Z.ACCESSION_NUMBER = PD.ACCESSION_NUMBER
  6  UNION SELECT DISTINCT ER.ID, PD.ID FROM zstg_interpro_tmp Z, protein_domain PD,
  7  expression_reporter ER
  8    WHERE Z.PROBE_SET_ID = ER.NAME AND Z.ACCESSION_NUMBER = PD.ACCESSION_NUMBER;

28290 rows created.

SQL> COMMIT;

Commit complete.

SQL> 
SQL> INSERT
  2    INTO snp_reporter(NAME, SNP_ID, microarray_ID) SELECT DISTINCT NAME, SNP_ID,
  3  microarray_ID FROM zstg_snp_reporter;

1177971 rows created.

SQL> COMMIT;

Commit complete.

SQL> 
SQL> INSERT
  2  INTO marker_relative_location (TYPE, DISTANCE, ORIENTATION, SNP_ID, PROBE_SET_ID
  3  ) SELECT DISTINCT TYPE, DISTANCE, DECODE(ORIENTATION, 'downstream', 'upstream',
  4  'upstream', 'downstream', ORIENTATION), SNP_ID, PROBE_SET_ID FROM (SELECT
  5  DISTINCT TYPE, DISTANCE, '' AS ORIENTATION, SR.SNP_ID, Z.PROBE_SET_ID FROM
  6  zstg_geneTIC_MAP Z, snp_reporter SR
  7   WHERE Z.PROBE_SET_ID = SR.NAME AND SR.SNP_ID IS NOT NULL UNION SELECT DISTINCT
  8  'Microsatellite', Z.DISTANCE, Z.RELATIVE_POSITION, SR.SNP_ID, Z.PROBE_SET_ID
  9  					  FROM zstg_microsatellite Z, snp_reporter SR
 10  			  WHERE Z.PROBE_SET_ID = SR.NAME AND SR.SNP_ID IS NOT NULL);

3065513 rows created.

SQL> COMMIT;

Commit complete.

SQL> 
SQL> -- fix for GF12202
SQL>  delete from marker_relative_location where ROWID NOT IN
  2   (select MIN(ROWID) from marker_relative_location GROUP BY SNP_ID, TYPE, ORIENTATION);

136250 rows deleted.

SQL>  commit;

Commit complete.

SQL> 
SQL> -- these statements attempt to ensure that
SQL> -- the next 4 inserts do not choose a cartesian join path
SQL> ANALYZE TABLE marker_relative_location COMPUTE STATISTICS;

Table analyzed.

SQL> 
SQL> -- first TSC id
SQL> INSERT
  2   INTO marker_marker_rel_location (marker_ID, MARKER_REL_LOCATION_ID, SORT_ORDER)
  3  SELECT M.ID, MRL.ID, 1 FROM zstg_geneTIC_MAP Z, marker_relative_location MRL,
  4  marker M
  5   WHERE Z.PROBE_SET_ID = MRL.PROBE_SET_ID AND Z.FIRST_SNP_TSC_ID = M.marker_ID
  6  AND MRL.TYPE = 'SLM1' AND M.TYPE = 'TSC';

391290 rows created.

SQL> 
SQL> COMMIT;

Commit complete.

SQL> 
SQL> -- second TSC id
SQL> INSERT
  2   INTO marker_marker_rel_location (marker_ID, MARKER_REL_LOCATION_ID, SORT_ORDER)
  3  SELECT M.ID, MRL.ID, 2 FROM zstg_geneTIC_MAP Z, marker_relative_location MRL,
  4  marker M
  5   WHERE Z.PROBE_SET_ID = MRL.PROBE_SET_ID AND Z.SECOND_SNP_TSC_ID = M.marker_ID
  6  AND MRL.TYPE = 'SLM1' AND M.TYPE = 'TSC';

402330 rows created.

SQL> COMMIT;

Commit complete.

SQL> 
SQL> INSERT
  2   INTO marker_marker_rel_location (marker_ID, MARKER_REL_LOCATION_ID, SORT_ORDER)
  3  SELECT marker_ID, MARKER_REL_LOCATION_ID, 1 AS SORT_ORDER FROM (SELECT M.ID AS
  4  marker_ID, MRL.ID AS MARKER_REL_LOCATION_ID FROM zstg_geneTIC_MAP Z,
  5  marker_relative_location MRL, marker_lookup M
  6  		  WHERE Z.PROBE_SET_ID = MRL.PROBE_SET_ID AND Z.TYPE = MRL.TYPE AND
  7  Z.FIRST_marker_ID = M.NAME AND M.taxon_ID = 5);

1656565 rows created.

SQL> COMMIT;

Commit complete.

SQL> 
SQL> 
SQL> -- second marker id
SQL> 
SQL> -- does a join with marker alias
SQL> 
SQL> INSERT
  2   INTO marker_marker_rel_location (marker_ID, MARKER_REL_LOCATION_ID, SORT_ORDER)
  3  SELECT marker_ID, MARKER_REL_LOCATION_ID, 2 AS SORT_ORDER FROM (SELECT M.ID AS
  4  marker_ID, MRL.ID AS MARKER_REL_LOCATION_ID FROM zstg_geneTIC_MAP Z,
  5  marker_relative_location MRL, marker_lookup M
  6  		  WHERE Z.PROBE_SET_ID = MRL.PROBE_SET_ID AND Z.TYPE = MRL.TYPE AND
  7  Z.SECOND_marker_ID = M.NAME AND M.taxon_ID = 5) ;

1665236 rows created.

SQL> COMMIT;

Commit complete.

SQL> 
SQL> -- does a join with marker alias as well
SQL> -- decode(ORIENTATION,'downstream','upstream','upstream','downstream',ORIENTATION)
SQL> INSERT
  2  INTO marker_marker_rel_location (marker_ID, MARKER_REL_LOCATION_ID) SELECT M.ID,
  3  MRL.ID FROM zstg_microsatellite Z, marker_relative_location MRL, marker_lookup M
  4  ,
  5    marker MRK
  6  	  WHERE Z.PROBE_SET_ID = MRL.PROBE_SET_ID AND Z.RELATIVE_POSITION = DECODE(
  7  MRL.ORIENTATION, 'downstream', 'upstream', 'upstream', 'downstream') AND M.NAME
  8  = Z.marker AND M.ID = MRK.ID AND MRK.TYPE = 'UNISTS' AND M.taxon_ID = 5;

1264714 rows created.

SQL> COMMIT;

Commit complete.

SQL> 
SQL> -- add annotation versions to microarray table
SQL> 
SQL> UPDATE microarray m SET annotation_version =
  2  	 (select annotation_version from zstg_microarray_versions v where v.array_name = m.array_name);

16 rows updated.

SQL> 
SQL> -- create indexes on user tables
SQL> 
SQL> @create_indexes;
SQL> 
SQL> @$LOAD/indexes/protein_domain.cols.sql;
SQL> 
SQL> create index PROTEIN_MAIN_ID on PROTEIN_DOMAIN(ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index PROTEIN_MAIN_ACCESSION_ on PROTEIN_DOMAIN(ACCESSION_NUMBER) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index PROTEIN_MAIN_DESCRIPTIO on PROTEIN_DOMAIN(DESCRIPTION) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index PROTEIN_MAIN_TYPE on PROTEIN_DOMAIN(TYPE) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/gene_relative_location.cols.sql;
SQL> 
SQL> create index GENE_RELTION_ID on GENE_RELATIVE_LOCATION(ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index GENE_RELTION_ORIENTATIO on GENE_RELATIVE_LOCATION(ORIENTATION) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index GENE_RELTION_DISTANCE on GENE_RELATIVE_LOCATION(DISTANCE) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index GENE_RELTION_GENE_ID on GENE_RELATIVE_LOCATION(GENE_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index GENE_RELTION_SNP_ID on GENE_RELATIVE_LOCATION(SNP_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index GENE_RELTION_PROBE_SET_ on GENE_RELATIVE_LOCATION(PROBE_SET_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index GENE_RELTION_TYPE on GENE_RELATIVE_LOCATION(TYPE) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/marker_marker_rel_location.cols.sql;
SQL> 
SQL> create index MARKER_MTION_MARKER_ID on MARKER_MARKER_REL_LOCATION(MARKER_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index MARKER_MTION_MARKER_REL on MARKER_MARKER_REL_LOCATION(MARKER_REL_LOCATION_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index MARKER_MTION_SORT_ORDER on MARKER_MARKER_REL_LOCATION(SORT_ORDER) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/marker_relative_location.cols.sql;
SQL> 
SQL> create index MARKER_RTION_ID on MARKER_RELATIVE_LOCATION(ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index MARKER_RTION_TYPE on MARKER_RELATIVE_LOCATION(TYPE) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index MARKER_RTION_ORIENTATIO on MARKER_RELATIVE_LOCATION(ORIENTATION) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index MARKER_RTION_DISTANCE on MARKER_RELATIVE_LOCATION(DISTANCE) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index MARKER_RTION_SNP_ID on MARKER_RELATIVE_LOCATION(SNP_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index MARKER_RTION_PROBE_SET_ on MARKER_RELATIVE_LOCATION(PROBE_SET_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/expression_reporter.cols.sql;
SQL> 
SQL> create index EXPRESSIRTER_ID on EXPRESSION_REPORTER(ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXPRESSIRTER_NAME on EXPRESSION_REPORTER(NAME) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXPRESSIRTER_MICROARRAY on EXPRESSION_REPORTER(MICROARRAY_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXPRESSIRTER_SEQUENCE_T on EXPRESSION_REPORTER(SEQUENCE_TYPE) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXPRESSIRTER_SEQUENCE_S on EXPRESSION_REPORTER(SEQUENCE_SOURCE) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXPRESSIRTER_TRANSCRIPT on EXPRESSION_REPORTER(TRANSCRIPT_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXPRESSIRTER_TARGET_DES on EXPRESSION_REPORTER(TARGET_DESCRIPTION) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXPRESSIRTER_GENE_ID on EXPRESSION_REPORTER(GENE_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXPRESSIRTER_NAS_ID on EXPRESSION_REPORTER(NAS_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/zstg_expression_reporter.cols.sql;
SQL> 
SQL> create index ZSTG_EXPRTER_ID on ZSTG_EXPRESSION_REPORTER(ID) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXPRTER_NAME on ZSTG_EXPRESSION_REPORTER(NAME) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;
create index ZSTG_EXPRTER_NAME on ZSTG_EXPRESSION_REPORTER(NAME) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT
                                                           *
ERROR at line 1:
ORA-01408: such column list already indexed


SQL> create index ZSTG_EXPRTER_MICROARRAY on ZSTG_EXPRESSION_REPORTER(MICROARRAY_ID) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXPRTER_SEQUENCE_T on ZSTG_EXPRESSION_REPORTER(SEQUENCE_TYPE) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXPRTER_SEQUENCE_S on ZSTG_EXPRESSION_REPORTER(SEQUENCE_SOURCE) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXPRTER_TRANSCRIPT on ZSTG_EXPRESSION_REPORTER(TRANSCRIPT_ID) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXPRTER_TARGET_DES on ZSTG_EXPRESSION_REPORTER(TARGET_DESCRIPTION) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXPRTER_GENE_ID on ZSTG_EXPRESSION_REPORTER(GENE_ID) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXPRTER_NAS_ID on ZSTG_EXPRESSION_REPORTER(NAS_ID) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXPRTER_CHROMOSOME on ZSTG_EXPRESSION_REPORTER(CHROMOSOME_ID) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXPRTER_CHR_START on ZSTG_EXPRESSION_REPORTER(CHR_START) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXPRTER_CHR_STOP on ZSTG_EXPRESSION_REPORTER(CHR_STOP) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXPRTER_CYTO_START on ZSTG_EXPRESSION_REPORTER(CYTO_START) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXPRTER_CYTO_STOP on ZSTG_EXPRESSION_REPORTER(CYTO_STOP) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXPRTER_ASSEMBLY on ZSTG_EXPRESSION_REPORTER(ASSEMBLY) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/expr_reporter_protein_domain.cols.sql;
SQL> 
SQL> create index EXPR_REPMAIN_EXPR_REPOR on EXPR_REPORTER_PROTEIN_DOMAIN(EXPR_REPORTER_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXPR_REPMAIN_PROTEIN_DO on EXPR_REPORTER_PROTEIN_DOMAIN(PROTEIN_DOMAIN_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/snp_reporter.cols.sql;
SQL> 
SQL> create index SNP_REPORTER_ID on SNP_REPORTER(ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index SNP_REPORTER_NAME on SNP_REPORTER(NAME) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index SNP_REPORTER_MICROARRAY on SNP_REPORTER(MICROARRAY_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index SNP_REPORTER_SNP_ID on SNP_REPORTER(SNP_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index SNP_REPORTER_PHAST_CONS on SNP_REPORTER(PHAST_CONSERVATION) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/zstg_snp_reporter.cols.sql;
SQL> 
SQL> create index ZSTG_SNPRTER_ID on ZSTG_SNP_REPORTER(ID) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_SNPRTER_NAME on ZSTG_SNP_REPORTER(NAME) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_SNPRTER_MICROARRAY on ZSTG_SNP_REPORTER(MICROARRAY_ID) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_SNPRTER_SNP_ID on ZSTG_SNP_REPORTER(SNP_ID) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_SNPRTER_PHAST_CONS on ZSTG_SNP_REPORTER(PHAST_CONSERVATION) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_SNPRTER_CHROMOSOME on ZSTG_SNP_REPORTER(CHROMOSOME_ID) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_SNPRTER_CHR_START on ZSTG_SNP_REPORTER(CHR_START) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_SNPRTER_CHR_STOP on ZSTG_SNP_REPORTER(CHR_STOP) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_SNPRTER_CYTO_START on ZSTG_SNP_REPORTER(CYTO_START) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_SNPRTER_CYTO_STOP on ZSTG_SNP_REPORTER(CYTO_STOP) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/exon_reporter_gene.cols.sql;
SQL> 
SQL> create index EXON_REPGENE_EXON_REPOR on EXON_REPORTER_GENE(EXON_REPORTER_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXON_REPGENE_GENE_ID on EXON_REPORTER_GENE(GENE_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/exon_reporter.cols.sql;
SQL> 
SQL> create index EXON_REPRTER_ID on EXON_REPORTER(ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXON_REPRTER_NAME on EXON_REPORTER(NAME) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXON_REPRTER_MICROARRAY on EXON_REPORTER(MICROARRAY_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXON_REPRTER_MANUFACTUR on EXON_REPORTER(MANUFACTURER_PSR_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXON_REPRTER_PROBE_COUN on EXON_REPORTER(PROBE_COUNT) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXON_REPRTER_STRAND on EXON_REPORTER(STRAND) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXON_REPRTER_TRANSCRIPT on EXON_REPORTER(TRANSCRIPT_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;
create index EXON_REPRTER_TRANSCRIPT on EXON_REPORTER(TRANSCRIPT_ID) PARALLEL NOLOGGING tablespace CABIO_FUT
                                                      *
ERROR at line 1:
ORA-01408: such column list already indexed


SQL> create index EXON_REPRTER_EXON_ID on EXON_REPORTER(EXON_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/zstg_exon_reporter.cols.sql;
SQL> 
SQL> create index ZSTG_EXORTER_ID on ZSTG_EXON_REPORTER(ID) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXORTER_NAME on ZSTG_EXON_REPORTER(NAME) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXORTER_MICROARRAY on ZSTG_EXON_REPORTER(MICROARRAY_ID) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXORTER_MANUFACTUR on ZSTG_EXON_REPORTER(MANUFACTURER_PSR_ID) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXORTER_PROBE_COUN on ZSTG_EXON_REPORTER(PROBE_COUNT) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXORTER_STRAND on ZSTG_EXON_REPORTER(STRAND) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXORTER_TRANSCRIPT on ZSTG_EXON_REPORTER(TRANSCRIPT_ID) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXORTER_EXON_ID on ZSTG_EXON_REPORTER(EXON_ID) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXORTER_CHROMOSOME on ZSTG_EXON_REPORTER(CHROMOSOME_ID) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXORTER_START_LOCA on ZSTG_EXON_REPORTER(START_LOCATION) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_EXORTER_STOP_LOCAT on ZSTG_EXON_REPORTER(STOP_LOCATION) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/exon.cols.sql;
SQL> 
SQL> create index EXONEXON_ID on EXON(ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXONEXON_MANUFACTUR on EXON(MANUFACTURER_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;
create index EXONEXON_MANUFACTUR on EXON(MANUFACTURER_ID) PARALLEL NOLOGGING tablespace CABIO_FUT
                                         *
ERROR at line 1:
ORA-01408: such column list already indexed


SQL> create index EXONEXON_SOURCE on EXON(SOURCE) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXONEXON_TRANSCRIPT on EXON(TRANSCRIPT_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/transcript_gene.cols.sql;
SQL> 
SQL> create index TRANSCRIGENE_TRANSCRIPT on TRANSCRIPT_GENE(TRANSCRIPT_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;
create index TRANSCRIGENE_TRANSCRIPT on TRANSCRIPT_GENE(TRANSCRIPT_ID) PARALLEL NOLOGGING tablespace CABIO_FUT
                                                        *
ERROR at line 1:
ORA-01408: such column list already indexed


SQL> create index TRANSCRIGENE_GENE_ID on TRANSCRIPT_GENE(GENE_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/transcript.cols.sql;
SQL> 
SQL> create index TRANSCRIRIPT_ID on TRANSCRIPT(ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index TRANSCRIRIPT_MANUFACTUR on TRANSCRIPT(MANUFACTURER_ID) PARALLEL NOLOGGING tablespace CABIO_FUT;
create index TRANSCRIRIPT_MANUFACTUR on TRANSCRIPT(MANUFACTURER_ID) PARALLEL NOLOGGING tablespace CABIO_FUT
                                                   *
ERROR at line 1:
ORA-01408: such column list already indexed


SQL> create index TRANSCRIRIPT_SOURCE on TRANSCRIPT(SOURCE) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index TRANSCRIRIPT_STRAND on TRANSCRIPT(STRAND) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index TRANSCRIRIPT_PROBE_COUN on TRANSCRIPT(PROBE_COUNT) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/microarray.cols.sql;
SQL> 
SQL> create index MICROARRRRAY_ANNOTATION on MICROARRAY(ANNOTATION_VERSION) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index MICROARRRRAY_ID on MICROARRAY(ID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index MICROARRRRAY_ARRAY_NAME on MICROARRAY(ARRAY_NAME) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index MICROARRRRAY_ANNOTATION on MICROARRAY(ANNOTATION_DATE) PARALLEL NOLOGGING tablespace CABIO_FUT;
create index MICROARRRRAY_ANNOTATION on MICROARRAY(ANNOTATION_DATE) PARALLEL NOLOGGING tablespace CABIO_FUT
             *
ERROR at line 1:
ORA-00955: name is already used by an existing object


SQL> create index MICROARRRRAY_GENOME_VER on MICROARRAY(GENOME_VERSION) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index MICROARRRRAY_DBSNP_VERS on MICROARRAY(DBSNP_VERSION) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index MICROARRRRAY_PLATFORM on MICROARRAY(PLATFORM) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index MICROARRRRAY_TYPE on MICROARRAY(TYPE) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index MICROARRRRAY_DESCRIPTIO on MICROARRAY(DESCRIPTION) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index MICROARRRRAY_ACCESSION on MICROARRAY(ACCESSION) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index MICROARRRRAY_LSID on MICROARRAY(LSID) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/protein_domain.lower.sql;
SQL> 
SQL> create index PROTEIN_MAIN_ACCESSION__lwr on PROTEIN_DOMAIN(lower(ACCESSION_NUMBER)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index PROTEIN_MAIN_DESCRIPTIO_lwr on PROTEIN_DOMAIN(lower(DESCRIPTION)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index PROTEIN_MAIN_TYPE_lwr on PROTEIN_DOMAIN(lower(TYPE)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/gene_relative_location.lower.sql;
SQL> 
SQL> create index GENE_RELTION_ORIENTATIO_lwr on GENE_RELATIVE_LOCATION(lower(ORIENTATION)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index GENE_RELTION_DISTANCE_lwr on GENE_RELATIVE_LOCATION(lower(DISTANCE)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index GENE_RELTION_PROBE_SET__lwr on GENE_RELATIVE_LOCATION(lower(PROBE_SET_ID)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index GENE_RELTION_TYPE_lwr on GENE_RELATIVE_LOCATION(lower(TYPE)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/marker_marker_rel_location.lower.sql;
SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/marker_relative_location.lower.sql;
SQL> 
SQL> create index MARKER_RTION_TYPE_lwr on MARKER_RELATIVE_LOCATION(lower(TYPE)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index MARKER_RTION_ORIENTATIO_lwr on MARKER_RELATIVE_LOCATION(lower(ORIENTATION)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index MARKER_RTION_DISTANCE_lwr on MARKER_RELATIVE_LOCATION(lower(DISTANCE)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index MARKER_RTION_PROBE_SET__lwr on MARKER_RELATIVE_LOCATION(lower(PROBE_SET_ID)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/expression_reporter.lower.sql;
SQL> 
SQL> create index EXPRESSIRTER_NAME_lwr on EXPRESSION_REPORTER(lower(NAME)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXPRESSIRTER_SEQUENCE_T_lwr on EXPRESSION_REPORTER(lower(SEQUENCE_TYPE)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXPRESSIRTER_SEQUENCE_S_lwr on EXPRESSION_REPORTER(lower(SEQUENCE_SOURCE)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXPRESSIRTER_TRANSCRIPT_lwr on EXPRESSION_REPORTER(lower(TRANSCRIPT_ID)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXPRESSIRTER_TARGET_DES_lwr on EXPRESSION_REPORTER(lower(TARGET_DESCRIPTION)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/expr_reporter_protein_domain.lower.sql;
SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/snp_reporter.lower.sql;
SQL> 
SQL> create index SNP_REPORTER_NAME_lwr on SNP_REPORTER(lower(NAME)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index SNP_REPORTER_PHAST_CONS_lwr on SNP_REPORTER(lower(PHAST_CONSERVATION)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/exon_reporter_gene.lower.sql;
SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/exon_reporter.lower.sql;
SQL> 
SQL> create index EXON_REPRTER_NAME_lwr on EXON_REPORTER(lower(NAME)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXON_REPRTER_MANUFACTUR_lwr on EXON_REPORTER(lower(MANUFACTURER_PSR_ID)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXON_REPRTER_PROBE_COUN_lwr on EXON_REPORTER(lower(PROBE_COUNT)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXON_REPRTER_STRAND_lwr on EXON_REPORTER(lower(STRAND)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/exon.lower.sql;
SQL> 
SQL> create index EXONEXON_MANUFACTUR_lwr on EXON(lower(MANUFACTURER_ID)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index EXONEXON_SOURCE_lwr on EXON(lower(SOURCE)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/transcript_gene.lower.sql;
SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/transcript.lower.sql;
SQL> 
SQL> create index TRANSCRIRIPT_MANUFACTUR_lwr on TRANSCRIPT(lower(MANUFACTURER_ID)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index TRANSCRIRIPT_SOURCE_lwr on TRANSCRIPT(lower(SOURCE)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index TRANSCRIRIPT_STRAND_lwr on TRANSCRIPT(lower(STRAND)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> create index TRANSCRIRIPT_PROBE_COUN_lwr on TRANSCRIPT(lower(PROBE_COUNT)) PARALLEL NOLOGGING tablespace CABIO_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @enable_constraints;
SQL> 
SQL> @$LOAD/constraints/protein_domain.enable.sql;
SQL> create unique index PROTEIN_DOMAIN_PK_idx on PROTEIN_DOMAIN
  2  (ID) tablespace CABIO_FUT;
(ID) tablespace CABIO_FUT
 *
ERROR at line 2:
ORA-01408: such column list already indexed


SQL> alter table PROTEIN_DOMAIN enable constraint PROTEIN_DOMAIN_PK using index PROTEIN_DOMAIN_PK_idx;
alter table PROTEIN_DOMAIN enable constraint PROTEIN_DOMAIN_PK using index PROTEIN_DOMAIN_PK_idx
*
ERROR at line 1:
ORA-01418: specified index does not exist


SQL> create unique index SYS_C0021167_idx on PROTEIN_DOMAIN
  2  (TYPE,DESCRIPTION,ACCESSION_NUMBER) tablespace CABIO_FUT;

Index created.

SQL> alter table PROTEIN_DOMAIN enable constraint SYS_C0021167 using index SYS_C0021167_idx;

Table altered.

SQL> 
SQL> alter table PROTEIN_DOMAIN enable constraint SYS_C004653;

Table altered.

SQL> alter table PROTEIN_DOMAIN enable constraint SYS_C004654;

Table altered.

SQL> alter table PROTEIN_DOMAIN enable constraint SYS_C004655;

Table altered.

SQL> alter table PROTEIN_DOMAIN enable constraint SYS_C004656;

Table altered.

SQL> alter table PROTEIN_DOMAIN enable constraint PROTEIN_DOMAIN_PK;

Table altered.

SQL> alter table PROTEIN_DOMAIN enable constraint SYS_C0021167;

Table altered.

SQL> alter table PROTEIN_DOMAIN enable constraint SYS_C0021167;

Table altered.

SQL> alter table PROTEIN_DOMAIN enable constraint SYS_C0021167;

Table altered.

SQL> 
SQL> alter table PROTEIN_DOMAIN enable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/gene_relative_location.enable.sql;
SQL> create unique index SYS_C0021104_idx on GENE_RELATIVE_LOCATION
  2  (TYPE,PROBE_SET_ID,SNP_ID,GENE_ID,DISTANCE,ORIENTATION) tablespace CABIO_FUT;

Index created.

SQL> alter table GENE_RELATIVE_LOCATION enable constraint SYS_C0021104 using index SYS_C0021104_idx;

Table altered.

SQL> create unique index GENE_REL_PK_idx on GENE_RELATIVE_LOCATION
  2  (ID) tablespace CABIO_FUT;
(ID) tablespace CABIO_FUT
 *
ERROR at line 2:
ORA-01408: such column list already indexed


SQL> alter table GENE_RELATIVE_LOCATION enable constraint GENE_REL_PK using index GENE_REL_PK_idx;
alter table GENE_RELATIVE_LOCATION enable constraint GENE_REL_PK using index GENE_REL_PK_idx
*
ERROR at line 1:
ORA-01418: specified index does not exist


SQL> 
SQL> alter table GENE_RELATIVE_LOCATION enable constraint SYS_C0021104;

Table altered.

SQL> alter table GENE_RELATIVE_LOCATION enable constraint SYS_C0021104;

Table altered.

SQL> alter table GENE_RELATIVE_LOCATION enable constraint SYS_C0021104;

Table altered.

SQL> alter table GENE_RELATIVE_LOCATION enable constraint SYS_C0021104;

Table altered.

SQL> alter table GENE_RELATIVE_LOCATION enable constraint SYS_C0021104;

Table altered.

SQL> alter table GENE_RELATIVE_LOCATION enable constraint SYS_C0021104;

Table altered.

SQL> alter table GENE_RELATIVE_LOCATION enable constraint SYS_C004489;

Table altered.

SQL> alter table GENE_RELATIVE_LOCATION enable constraint SYS_C004490;

Table altered.

SQL> alter table GENE_RELATIVE_LOCATION enable constraint SYS_C004491;

Table altered.

SQL> alter table GENE_RELATIVE_LOCATION enable constraint SYS_C004492;

Table altered.

SQL> alter table GENE_RELATIVE_LOCATION enable constraint SYS_C004493;

Table altered.

SQL> alter table GENE_RELATIVE_LOCATION enable constraint SYS_C004494;

Table altered.

SQL> alter table GENE_RELATIVE_LOCATION enable constraint GENE_REL_PK;

Table altered.

SQL> 
SQL> alter table GENE_RELATIVE_LOCATION enable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/marker_marker_rel_location.enable.sql;
SQL> create unique index SYS_C0021122_idx on MARKER_MARKER_REL_LOCATION
  2  (SORT_ORDER,MARKER_REL_LOCATION_ID,MARKER_ID) tablespace CABIO_FUT;

Index created.

SQL> alter table MARKER_MARKER_REL_LOCATION enable constraint SYS_C0021122 using index SYS_C0021122_idx;

Table altered.

SQL> 
SQL> alter table MARKER_MARKER_REL_LOCATION enable constraint SYS_C0021122;

Table altered.

SQL> alter table MARKER_MARKER_REL_LOCATION enable constraint SYS_C0021122;

Table altered.

SQL> alter table MARKER_MARKER_REL_LOCATION enable constraint SYS_C0021122;

Table altered.

SQL> alter table MARKER_MARKER_REL_LOCATION enable constraint SYS_C004593;

Table altered.

SQL> alter table MARKER_MARKER_REL_LOCATION enable constraint SYS_C004594;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/marker_relative_location.enable.sql;
SQL> create unique index SYS_C0021123_idx on MARKER_RELATIVE_LOCATION
  2  (PROBE_SET_ID,SNP_ID,DISTANCE,ORIENTATION,TYPE) tablespace CABIO_FUT;

Index created.

SQL> alter table MARKER_RELATIVE_LOCATION enable constraint SYS_C0021123 using index SYS_C0021123_idx;

Table altered.

SQL> create unique index MARKER_RL_PK_idx on MARKER_RELATIVE_LOCATION
  2  (ID) tablespace CABIO_FUT;
(ID) tablespace CABIO_FUT
 *
ERROR at line 2:
ORA-01408: such column list already indexed


SQL> alter table MARKER_RELATIVE_LOCATION enable constraint MARKER_RL_PK using index MARKER_RL_PK_idx;
alter table MARKER_RELATIVE_LOCATION enable constraint MARKER_RL_PK using index MARKER_RL_PK_idx
*
ERROR at line 1:
ORA-01418: specified index does not exist


SQL> 
SQL> alter table MARKER_RELATIVE_LOCATION enable constraint SYS_C0021123;

Table altered.

SQL> alter table MARKER_RELATIVE_LOCATION enable constraint SYS_C0021123;

Table altered.

SQL> alter table MARKER_RELATIVE_LOCATION enable constraint SYS_C0021123;

Table altered.

SQL> alter table MARKER_RELATIVE_LOCATION enable constraint SYS_C0021123;

Table altered.

SQL> alter table MARKER_RELATIVE_LOCATION enable constraint SYS_C0021123;

Table altered.

SQL> alter table MARKER_RELATIVE_LOCATION enable constraint SYS_C0016540;

Table altered.

SQL> alter table MARKER_RELATIVE_LOCATION enable constraint SYS_C0016541;

Table altered.

SQL> alter table MARKER_RELATIVE_LOCATION enable constraint SYS_C004595;

Table altered.

SQL> alter table MARKER_RELATIVE_LOCATION enable constraint SYS_C004596;

Table altered.

SQL> alter table MARKER_RELATIVE_LOCATION enable constraint MARKER_RL_PK;

Table altered.

SQL> alter table MARKER_RELATIVE_LOCATION enable constraint SYS_C0016539;

Table altered.

SQL> 
SQL> alter table MARKER_RELATIVE_LOCATION enable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/expression_reporter.enable.sql;
SQL> create unique index SYS_C0021093_idx on EXPRESSION_REPORTER
  2  (NAS_ID,GENE_ID,TARGET_DESCRIPTION,TRANSCRIPT_ID,SEQUENCE_SOURCE,SEQUENCE_TYPE,MICROARRAY_ID,NAME) tablespace CABIO_FUT;

Index created.

SQL> alter table EXPRESSION_REPORTER enable constraint SYS_C0021093 using index SYS_C0021093_idx;

Table altered.

SQL> create unique index EXPR_REPORTER_PK_idx on EXPRESSION_REPORTER
  2  (ID) tablespace CABIO_FUT;
(ID) tablespace CABIO_FUT
 *
ERROR at line 2:
ORA-01408: such column list already indexed


SQL> alter table EXPRESSION_REPORTER enable constraint EXPR_REPORTER_PK using index EXPR_REPORTER_PK_idx;
alter table EXPRESSION_REPORTER enable constraint EXPR_REPORTER_PK using index EXPR_REPORTER_PK_idx
*
ERROR at line 1:
ORA-01418: specified index does not exist


SQL> 
SQL> alter table EXPRESSION_REPORTER enable constraint SYS_C0021093;

Table altered.

SQL> alter table EXPRESSION_REPORTER enable constraint SYS_C0021093;

Table altered.

SQL> alter table EXPRESSION_REPORTER enable constraint SYS_C0021093;

Table altered.

SQL> alter table EXPRESSION_REPORTER enable constraint SYS_C0021093;

Table altered.

SQL> alter table EXPRESSION_REPORTER enable constraint SYS_C0021093;

Table altered.

SQL> alter table EXPRESSION_REPORTER enable constraint SYS_C0021093;

Table altered.

SQL> alter table EXPRESSION_REPORTER enable constraint SYS_C0021093;

Table altered.

SQL> alter table EXPRESSION_REPORTER enable constraint SYS_C0021093;

Table altered.

SQL> alter table EXPRESSION_REPORTER enable constraint SYS_C004434;

Table altered.

SQL> alter table EXPRESSION_REPORTER enable constraint SYS_C004435;

Table altered.

SQL> alter table EXPRESSION_REPORTER enable constraint SYS_C004436;

Table altered.

SQL> alter table EXPRESSION_REPORTER enable constraint EXPR_REPORTER_PK;

Table altered.

SQL> 
SQL> alter table EXPRESSION_REPORTER enable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/zstg_expression_reporter.enable.sql;
SQL> create unique index PK_ZSTG_EXPRESSION_REPORTER_idx on ZSTG_EXPRESSION_REPORTER
  2  (ID) tablespace CABIO_MAP_FUT;
create unique index PK_ZSTG_EXPRESSION_REPORTER_idx on ZSTG_EXPRESSION_REPORTER
                    *
ERROR at line 1:
ORA-00972: identifier is too long


SQL> alter table ZSTG_EXPRESSION_REPORTER enable constraint PK_ZSTG_EXPRESSION_REPORTER using index PK_ZSTG_EXPRESSION_REPORTER_idx;
alter table ZSTG_EXPRESSION_REPORTER enable constraint PK_ZSTG_EXPRESSION_REPORTER using index PK_ZSTG_EXPRESSION_REPORTER_idx
                                                                                               *
ERROR at line 1:
ORA-00972: identifier is too long


SQL> 
SQL> alter table ZSTG_EXPRESSION_REPORTER enable constraint SYS_C004897;

Table altered.

SQL> alter table ZSTG_EXPRESSION_REPORTER enable constraint SYS_C004898;

Table altered.

SQL> alter table ZSTG_EXPRESSION_REPORTER enable constraint SYS_C004899;

Table altered.

SQL> alter table ZSTG_EXPRESSION_REPORTER enable constraint PK_ZSTG_EXPRESSION_REPORTER;

Table altered.

SQL> 
SQL> alter table ZSTG_EXPRESSION_REPORTER enable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/expr_reporter_protein_domain.enable.sql;
SQL> create unique index EXPREPPROTDOMPK_idx on EXPR_REPORTER_PROTEIN_DOMAIN
  2  (PROTEIN_DOMAIN_ID,EXPR_REPORTER_ID) tablespace CABIO_FUT;

Index created.

SQL> alter table EXPR_REPORTER_PROTEIN_DOMAIN enable constraint EXPREPPROTDOMPK using index EXPREPPROTDOMPK_idx;

Table altered.

SQL> 
SQL> alter table EXPR_REPORTER_PROTEIN_DOMAIN enable constraint SYS_C004439;

Table altered.

SQL> alter table EXPR_REPORTER_PROTEIN_DOMAIN enable constraint SYS_C004440;

Table altered.

SQL> alter table EXPR_REPORTER_PROTEIN_DOMAIN enable constraint EXPREPPROTDOMPK;

Table altered.

SQL> alter table EXPR_REPORTER_PROTEIN_DOMAIN enable constraint EXPREPPROTDOMPK;

Table altered.

SQL> 
SQL> alter table EXPR_REPORTER_PROTEIN_DOMAIN enable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/snp_reporter.enable.sql;
SQL> create unique index SYS_C0021185_idx on SNP_REPORTER
  2  (PHAST_CONSERVATION,SNP_ID,MICROARRAY_ID,NAME) tablespace CABIO_FUT;

Index created.

SQL> alter table SNP_REPORTER enable constraint SYS_C0021185 using index SYS_C0021185_idx;

Table altered.

SQL> create unique index SNP_REPORTER_PK_idx on SNP_REPORTER
  2  (ID) tablespace CABIO_FUT;
(ID) tablespace CABIO_FUT
 *
ERROR at line 2:
ORA-01408: such column list already indexed


SQL> alter table SNP_REPORTER enable constraint SNP_REPORTER_PK using index SNP_REPORTER_PK_idx;
alter table SNP_REPORTER enable constraint SNP_REPORTER_PK using index SNP_REPORTER_PK_idx
*
ERROR at line 1:
ORA-01418: specified index does not exist


SQL> 
SQL> alter table SNP_REPORTER enable constraint SYS_C0021185;

Table altered.

SQL> alter table SNP_REPORTER enable constraint SYS_C0021185;

Table altered.

SQL> alter table SNP_REPORTER enable constraint SYS_C0021185;

Table altered.

SQL> alter table SNP_REPORTER enable constraint SYS_C0021185;

Table altered.

SQL> alter table SNP_REPORTER enable constraint SYS_C004740;

Table altered.

SQL> alter table SNP_REPORTER enable constraint SYS_C004741;

Table altered.

SQL> alter table SNP_REPORTER enable constraint SYS_C004742;

Table altered.

SQL> alter table SNP_REPORTER enable constraint SNP_REPORTER_PK;

Table altered.

SQL> 
SQL> alter table SNP_REPORTER enable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/zstg_snp_reporter.enable.sql;
SQL> create unique index PK_ZSTG_SNP_REPORTER_idx on ZSTG_SNP_REPORTER
  2  (ID) tablespace CABIO_MAP_FUT;
(ID) tablespace CABIO_MAP_FUT
 *
ERROR at line 2:
ORA-01408: such column list already indexed


SQL> alter table ZSTG_SNP_REPORTER enable constraint PK_ZSTG_SNP_REPORTER using index PK_ZSTG_SNP_REPORTER_idx;
alter table ZSTG_SNP_REPORTER enable constraint PK_ZSTG_SNP_REPORTER using index PK_ZSTG_SNP_REPORTER_idx
*
ERROR at line 1:
ORA-01418: specified index does not exist


SQL> 
SQL> alter table ZSTG_SNP_REPORTER enable constraint SYS_C005239;

Table altered.

SQL> alter table ZSTG_SNP_REPORTER enable constraint SYS_C005240;

Table altered.

SQL> alter table ZSTG_SNP_REPORTER enable constraint SYS_C005241;

Table altered.

SQL> alter table ZSTG_SNP_REPORTER enable constraint PK_ZSTG_SNP_REPORTER;

Table altered.

SQL> 
SQL> alter table ZSTG_SNP_REPORTER enable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/exon_reporter_gene.enable.sql;
SQL> create unique index SYS_C0016536_idx on EXON_REPORTER_GENE
  2  (GENE_ID,EXON_REPORTER_ID) tablespace CABIO_FUT;

Index created.

SQL> alter table EXON_REPORTER_GENE enable constraint SYS_C0016536 using index SYS_C0016536_idx;

Table altered.

SQL> 
SQL> alter table EXON_REPORTER_GENE enable constraint SYS_C0016536;

Table altered.

SQL> alter table EXON_REPORTER_GENE enable constraint SYS_C0016536;

Table altered.

SQL> alter table EXON_REPORTER_GENE enable constraint SYS_C004432;

Table altered.

SQL> alter table EXON_REPORTER_GENE enable constraint SYS_C004433;

Table altered.

SQL> 
SQL> alter table EXON_REPORTER_GENE enable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/exon_reporter.enable.sql;
SQL> create unique index SYS_C0021092_idx on EXON_REPORTER
  2  (EXON_ID,TRANSCRIPT_ID,STRAND,PROBE_COUNT,MANUFACTURER_PSR_ID,MICROARRAY_ID,NAME) tablespace CABIO_FUT;

Index created.

SQL> alter table EXON_REPORTER enable constraint SYS_C0021092 using index SYS_C0021092_idx;

Table altered.

SQL> create unique index EXON_REPORTER_PK_idx on EXON_REPORTER
  2  (ID) tablespace CABIO_FUT;
(ID) tablespace CABIO_FUT
 *
ERROR at line 2:
ORA-01408: such column list already indexed


SQL> alter table EXON_REPORTER enable constraint EXON_REPORTER_PK using index EXON_REPORTER_PK_idx;
alter table EXON_REPORTER enable constraint EXON_REPORTER_PK using index EXON_REPORTER_PK_idx
*
ERROR at line 1:
ORA-01418: specified index does not exist


SQL> 
SQL> alter table EXON_REPORTER enable constraint SYS_C0021092;

Table altered.

SQL> alter table EXON_REPORTER enable constraint SYS_C0021092;

Table altered.

SQL> alter table EXON_REPORTER enable constraint SYS_C0021092;

Table altered.

SQL> alter table EXON_REPORTER enable constraint SYS_C0021092;

Table altered.

SQL> alter table EXON_REPORTER enable constraint SYS_C0021092;

Table altered.

SQL> alter table EXON_REPORTER enable constraint SYS_C0021092;

Table altered.

SQL> alter table EXON_REPORTER enable constraint SYS_C0021092;

Table altered.

SQL> alter table EXON_REPORTER enable constraint SYS_C004422;

Table altered.

SQL> alter table EXON_REPORTER enable constraint SYS_C004423;

Table altered.

SQL> alter table EXON_REPORTER enable constraint SYS_C004424;

Table altered.

SQL> alter table EXON_REPORTER enable constraint SYS_C004425;

Table altered.

SQL> alter table EXON_REPORTER enable constraint SYS_C004426;

Table altered.

SQL> alter table EXON_REPORTER enable constraint SYS_C004427;

Table altered.

SQL> alter table EXON_REPORTER enable constraint SYS_C004428;

Table altered.

SQL> alter table EXON_REPORTER enable constraint SYS_C004429;

Table altered.

SQL> alter table EXON_REPORTER enable constraint EXON_REPORTER_PK;

Table altered.

SQL> 
SQL> alter table EXON_REPORTER enable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/zstg_exon_reporter.enable.sql;
SQL> create unique index PK_ZSTG_EXON_REPORTER_idx on ZSTG_EXON_REPORTER
  2  (ID) tablespace CABIO_MAP_FUT;
(ID) tablespace CABIO_MAP_FUT
 *
ERROR at line 2:
ORA-01408: such column list already indexed


SQL> alter table ZSTG_EXON_REPORTER enable constraint PK_ZSTG_EXON_REPORTER using index PK_ZSTG_EXON_REPORTER_idx;
alter table ZSTG_EXON_REPORTER enable constraint PK_ZSTG_EXON_REPORTER using index PK_ZSTG_EXON_REPORTER_idx
*
ERROR at line 1:
ORA-01418: specified index does not exist


SQL> 
SQL> alter table ZSTG_EXON_REPORTER enable constraint SYS_C004883;

Table altered.

SQL> alter table ZSTG_EXON_REPORTER enable constraint SYS_C004884;

Table altered.

SQL> alter table ZSTG_EXON_REPORTER enable constraint SYS_C004885;

Table altered.

SQL> alter table ZSTG_EXON_REPORTER enable constraint SYS_C004886;

Table altered.

SQL> alter table ZSTG_EXON_REPORTER enable constraint SYS_C004887;

Table altered.

SQL> alter table ZSTG_EXON_REPORTER enable constraint SYS_C004888;

Table altered.

SQL> alter table ZSTG_EXON_REPORTER enable constraint SYS_C004889;

Table altered.

SQL> alter table ZSTG_EXON_REPORTER enable constraint SYS_C004890;

Table altered.

SQL> alter table ZSTG_EXON_REPORTER enable constraint PK_ZSTG_EXON_REPORTER;

Table altered.

SQL> 
SQL> alter table ZSTG_EXON_REPORTER enable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/exon.enable.sql;
SQL> create unique index SYS_C0021091_idx on EXON
  2  (TRANSCRIPT_ID,SOURCE,MANUFACTURER_ID) tablespace CABIO_FUT;

Index created.

SQL> alter table EXON enable constraint SYS_C0021091 using index SYS_C0021091_idx;

Table altered.

SQL> create unique index EXON_PK_idx on EXON
  2  (ID) tablespace CABIO_FUT;
(ID) tablespace CABIO_FUT
 *
ERROR at line 2:
ORA-01408: such column list already indexed


SQL> alter table EXON enable constraint EXON_PK using index EXON_PK_idx;
alter table EXON enable constraint EXON_PK using index EXON_PK_idx
*
ERROR at line 1:
ORA-01418: specified index does not exist


SQL> 
SQL> alter table EXON enable constraint SYS_C0021091;

Table altered.

SQL> alter table EXON enable constraint SYS_C0021091;

Table altered.

SQL> alter table EXON enable constraint SYS_C0021091;

Table altered.

SQL> alter table EXON enable constraint SYS_C004416;

Table altered.

SQL> alter table EXON enable constraint SYS_C004417;

Table altered.

SQL> alter table EXON enable constraint SYS_C004418;

Table altered.

SQL> alter table EXON enable constraint SYS_C004419;

Table altered.

SQL> alter table EXON enable constraint EXON_PK;

Table altered.

SQL> 
SQL> alter table EXON enable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/transcript_gene.enable.sql;
SQL> create unique index TGPK_idx on TRANSCRIPT_GENE
  2  (GENE_ID,TRANSCRIPT_ID) tablespace CABIO_FUT;

Index created.

SQL> alter table TRANSCRIPT_GENE enable constraint TGPK using index TGPK_idx;

Table altered.

SQL> 
SQL> alter table TRANSCRIPT_GENE enable constraint SYS_C004811;

Table altered.

SQL> alter table TRANSCRIPT_GENE enable constraint SYS_C004812;

Table altered.

SQL> alter table TRANSCRIPT_GENE enable constraint TGPK;

Table altered.

SQL> alter table TRANSCRIPT_GENE enable constraint TGPK;

Table altered.

SQL> 
SQL> alter table TRANSCRIPT_GENE enable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/transcript.enable.sql;
SQL> create unique index SYS_C0021192_idx on TRANSCRIPT
  2  (PROBE_COUNT,STRAND,SOURCE,MANUFACTURER_ID) tablespace CABIO_FUT;

Index created.

SQL> alter table TRANSCRIPT enable constraint SYS_C0021192 using index SYS_C0021192_idx;

Table altered.

SQL> create unique index TRANSCRIPT_PK_idx on TRANSCRIPT
  2  (ID) tablespace CABIO_FUT;
(ID) tablespace CABIO_FUT
 *
ERROR at line 2:
ORA-01408: such column list already indexed


SQL> alter table TRANSCRIPT enable constraint TRANSCRIPT_PK using index TRANSCRIPT_PK_idx;
alter table TRANSCRIPT enable constraint TRANSCRIPT_PK using index TRANSCRIPT_PK_idx
*
ERROR at line 1:
ORA-01418: specified index does not exist


SQL> 
SQL> alter table TRANSCRIPT enable constraint SYS_C0021192;

Table altered.

SQL> alter table TRANSCRIPT enable constraint SYS_C0021192;

Table altered.

SQL> alter table TRANSCRIPT enable constraint SYS_C0021192;

Table altered.

SQL> alter table TRANSCRIPT enable constraint SYS_C0021192;

Table altered.

SQL> alter table TRANSCRIPT enable constraint SYS_C004798;

Table altered.

SQL> alter table TRANSCRIPT enable constraint SYS_C004799;

Table altered.

SQL> alter table TRANSCRIPT enable constraint SYS_C004800;

Table altered.

SQL> alter table TRANSCRIPT enable constraint SYS_C004801;

Table altered.

SQL> alter table TRANSCRIPT enable constraint TRANSCRIPT_PK;

Table altered.

SQL> 
SQL> alter table TRANSCRIPT enable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/microarray.enable.sql;
SQL> create unique index SYS_C0021124_idx on MICROARRAY
  2  (LSID,ACCESSION,DESCRIPTION,TYPE,PLATFORM,DBSNP_VERSION,GENOME_VERSION,ANNOTATION_DATE,ARRAY_NAME) tablespace CABIO_FUT;

Index created.

SQL> alter table MICROARRAY enable constraint SYS_C0021124 using index SYS_C0021124_idx;

Table altered.

SQL> create unique index MICROARRAY_PK_idx on MICROARRAY
  2  (ID) tablespace CABIO_FUT;
(ID) tablespace CABIO_FUT
 *
ERROR at line 2:
ORA-01408: such column list already indexed


SQL> alter table MICROARRAY enable constraint MICROARRAY_PK using index MICROARRAY_PK_idx;
alter table MICROARRAY enable constraint MICROARRAY_PK using index MICROARRAY_PK_idx
*
ERROR at line 1:
ORA-01418: specified index does not exist


SQL> 
SQL> alter table MICROARRAY enable constraint SYS_C0021124;

Table altered.

SQL> alter table MICROARRAY enable constraint SYS_C0021124;

Table altered.

SQL> alter table MICROARRAY enable constraint SYS_C0021124;

Table altered.

SQL> alter table MICROARRAY enable constraint SYS_C0021124;

Table altered.

SQL> alter table MICROARRAY enable constraint SYS_C0021124;

Table altered.

SQL> alter table MICROARRAY enable constraint SYS_C0021124;

Table altered.

SQL> alter table MICROARRAY enable constraint SYS_C0021124;

Table altered.

SQL> alter table MICROARRAY enable constraint SYS_C0021124;

Table altered.

SQL> alter table MICROARRAY enable constraint SYS_C0021124;

Table altered.

SQL> alter table MICROARRAY enable constraint SYS_C0016542;

Table altered.

SQL> alter table MICROARRAY enable constraint SYS_C0016543;

Table altered.

SQL> alter table MICROARRAY enable constraint SYS_C0016544;

Table altered.

SQL> alter table MICROARRAY enable constraint SYS_C004599;

Table altered.

SQL> alter table MICROARRAY enable constraint SYS_C004600;
alter table MICROARRAY enable constraint SYS_C004600
                                         *
ERROR at line 1:
ORA-02293: cannot validate (CABIODEV.SYS_C004600) - check constraint violated


SQL> alter table MICROARRAY enable constraint MICROARRAY_PK;

Table altered.

SQL> 
SQL> alter table MICROARRAY enable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> 
SQL> -- analyze tables
SQL> 
SQL> ANALYZE TABLE protein_domain COMPUTE STATISTICS;

Table analyzed.

SQL> ANALYZE TABLE gene_relative_location COMPUTE STATISTICS;

Table analyzed.

SQL> ANALYZE TABLE marker_marker_rel_location COMPUTE STATISTICS;

Table analyzed.

SQL> ANALYZE TABLE marker_relative_location COMPUTE STATISTICS;

Table analyzed.

SQL> ANALYZE TABLE marker COMPUTE STATISTICS;

Table analyzed.

SQL> ANALYZE TABLE expression_reporter COMPUTE STATISTICS;

Table analyzed.

SQL> ANALYZE TABLE expr_reporter_protein_domain COMPUTE STATISTICS;

Table analyzed.

SQL> ANALYZE TABLE snp_reporter COMPUTE STATISTICS;

Table analyzed.

SQL> ANALYZE TABLE exon_reporter_gene COMPUTE STATISTICS;

Table analyzed.

SQL> ANALYZE TABLE exon COMPUTE STATISTICS;

Table analyzed.

SQL> ANALYZE TABLE microarray COMPUTE STATISTICS;

Table analyzed.

SQL> 
SQL> COMMIT;

Commit complete.

SQL> exit;
Disconnected from Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit Production
With the Partitioning, Data Mining and Real Application Testing options

SQL*Plus: Release 10.2.0.1.0 - Production on Wed May 6 16:02:47 2009

Copyright (c) 1982, 2005, Oracle.  All rights reserved.


Connected to:
Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit Production
With the Partitioning, Data Mining and Real Application Testing options

SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/constraints.sql zstg_population_frequency
SQL> rem -----------------------------------------------------------------------
> rem Filename:	constraints.sql
SQL> rem Purpose:	Script to spool a listing of all disable and enable constraints statements
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 800;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/triggers.sql zstg_population_frequency
SQL> rem -----------------------------------------------------------------------
> rem Filename:	idxrecr8.SQL
SQL> rem Purpose:	Script to spool a listing of all drop and create statements
SQL> rem	     required to rebuild indexes.
SQL> rem Notes:	Will build all non-sys/system indexes
SQL> rem Date:	     10-Oct-1998
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 800;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> 
SQL> @$LOAD/indexes/zstg_population_frequency.drop.sql
SQL> 
SQL> drop index ZSTG_PONCY_BIG_ID_LWR;

Index dropped.

SQL> drop index ZSTG_PONCY_BIG_ID;

Index dropped.

SQL> drop index ZSTG_POPENCY_SNP_PROBES_LWR;

Index dropped.

SQL> drop index ZSTG_POPENCY_MINOR_ALLE_LWR;

Index dropped.

SQL> drop index ZSTG_POPENCY_MAJOR_ALLE_LWR;

Index dropped.

SQL> drop index ZSTG_POPENCY_ETHNICITY_LWR;

Index dropped.

SQL> drop index ZSTG_POPENCY_TYPE_LWR;

Index dropped.

SQL> drop index ZSTG_POPENCY_SNP_PROBES;

Index dropped.

SQL> drop index ZSTG_POPENCY_MINOR_ALLE;

Index dropped.

SQL> drop index ZSTG_POPENCY_MAJOR_ALLE;

Index dropped.

SQL> drop index ZSTG_POPENCY_SNP_ID;

Index dropped.

SQL> drop index ZSTG_POPENCY_HETEROZYGO;

Index dropped.

SQL> drop index ZSTG_POPENCY_MINOR_FREQ;

Index dropped.

SQL> drop index ZSTG_POPENCY_MAJOR_FREQ;

Index dropped.

SQL> drop index ZSTG_POPENCY_ETHNICITY;

Index dropped.

SQL> drop index ZSTG_POPENCY_ID;

Index dropped.

SQL> drop index ZSTG_POPENCY_TYPE;

Index dropped.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/zstg_population_frequency.disable.sql
SQL> 
SQL> alter table ZSTG_POPULATION_FREQUENCY disable constraint SYS_C005059;

Table altered.

SQL> alter table ZSTG_POPULATION_FREQUENCY disable constraint SYS_C005060;

Table altered.

SQL> alter table ZSTG_POPULATION_FREQUENCY disable constraint SYS_C005061;

Table altered.

SQL> alter table ZSTG_POPULATION_FREQUENCY disable constraint SYS_C005062;

Table altered.

SQL> alter table ZSTG_POPULATION_FREQUENCY disable constraint SYS_C005063;

Table altered.

SQL> alter table ZSTG_POPULATION_FREQUENCY disable constraint SYS_C005064;

Table altered.

SQL> alter table ZSTG_POPULATION_FREQUENCY disable constraint SYS_C005065;

Table altered.

SQL> alter table ZSTG_POPULATION_FREQUENCY disable constraint SYS_C005066;

Table altered.

SQL> alter table ZSTG_POPULATION_FREQUENCY disable constraint SYS_C005067;

Table altered.

SQL> 
SQL> --EXIT;
SQL> 
SQL> EXECUTE zstg_population_frequency_LD;

PL/SQL procedure successfully completed.

SQL> 
SQL> @$LOAD/indexes/zstg_population_frequency.cols.sql
SQL> 
SQL> create index ZSTG_POPENCY_ID on ZSTG_POPULATION_FREQUENCY(ID) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_POPENCY_TYPE on ZSTG_POPULATION_FREQUENCY(TYPE) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_POPENCY_ETHNICITY on ZSTG_POPULATION_FREQUENCY(ETHNICITY) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_POPENCY_MAJOR_FREQ on ZSTG_POPULATION_FREQUENCY(MAJOR_FREQUENCY) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_POPENCY_MINOR_FREQ on ZSTG_POPULATION_FREQUENCY(MINOR_FREQUENCY) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_POPENCY_HETEROZYGO on ZSTG_POPULATION_FREQUENCY(HETEROZYGOUS_FREQUENCY) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_POPENCY_SNP_ID on ZSTG_POPULATION_FREQUENCY(SNP_ID) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_POPENCY_MAJOR_ALLE on ZSTG_POPULATION_FREQUENCY(MAJOR_ALLELE) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_POPENCY_MINOR_ALLE on ZSTG_POPULATION_FREQUENCY(MINOR_ALLELE) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_POPENCY_SNP_PROBES on ZSTG_POPULATION_FREQUENCY(SNP_PROBESET_AFFY_ID) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/zstg_population_frequency.lower.sql
SQL> 
SQL> create index ZSTG_POPENCY_TYPE_lwr on ZSTG_POPULATION_FREQUENCY(lower(TYPE)) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_POPENCY_ETHNICITY_lwr on ZSTG_POPULATION_FREQUENCY(lower(ETHNICITY)) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_POPENCY_MAJOR_ALLE_lwr on ZSTG_POPULATION_FREQUENCY(lower(MAJOR_ALLELE)) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_POPENCY_MINOR_ALLE_lwr on ZSTG_POPULATION_FREQUENCY(lower(MINOR_ALLELE)) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> create index ZSTG_POPENCY_SNP_PROBES_lwr on ZSTG_POPULATION_FREQUENCY(lower(SNP_PROBESET_AFFY_ID)) PARALLEL NOLOGGING tablespace CABIO_MAP_FUT;

Index created.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/constraints/zstg_population_frequency.enable.sql
SQL> 
SQL> alter table ZSTG_POPULATION_FREQUENCY enable constraint SYS_C005059;

Table altered.

SQL> alter table ZSTG_POPULATION_FREQUENCY enable constraint SYS_C005060;

Table altered.

SQL> alter table ZSTG_POPULATION_FREQUENCY enable constraint SYS_C005061;

Table altered.

SQL> alter table ZSTG_POPULATION_FREQUENCY enable constraint SYS_C005062;

Table altered.

SQL> alter table ZSTG_POPULATION_FREQUENCY enable constraint SYS_C005063;

Table altered.

SQL> alter table ZSTG_POPULATION_FREQUENCY enable constraint SYS_C005064;

Table altered.

SQL> alter table ZSTG_POPULATION_FREQUENCY enable constraint SYS_C005065;

Table altered.

SQL> alter table ZSTG_POPULATION_FREQUENCY enable constraint SYS_C005066;

Table altered.

SQL> alter table ZSTG_POPULATION_FREQUENCY enable constraint SYS_C005067;

Table altered.

SQL> 
SQL> --EXIT;
SQL> exit;
Disconnected from Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit Production
With the Partitioning, Data Mining and Real Application Testing options
Getting population frequency 
Finished getting all the relevant data 

SQL*Plus: Release 10.2.0.1.0 - Production on Wed May 6 16:12:36 2009

Copyright (c) 1982, 2005, Oracle.  All rights reserved.


Connected to:
Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit Production
With the Partitioning, Data Mining and Real Application Testing options


Table truncated.

SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/constraints.sql population_frequency
SQL> rem -----------------------------------------------------------------------
> rem Filename:	constraints.sql
SQL> rem Purpose:	Script to spool a listing of all disable and enable constraints statements
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 800;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> @$LOAD/triggers.sql population_frequency
SQL> rem -----------------------------------------------------------------------
> rem Filename:	idxrecr8.SQL
SQL> rem Purpose:	Script to spool a listing of all drop and create statements
SQL> rem	     required to rebuild indexes.
SQL> rem Notes:	Will build all non-sys/system indexes
SQL> rem Date:	     10-Oct-1998
SQL> rem Author:	Anonymous
SQL> rem -----------------------------------------------------------------------
> 
SQL> set linesize 800;
SQL> set pagesize 10000;
SQL> set long 50;
SQL> set trimspool on;
SQL> set termout off;
SQL> set feedback on;
SQL> set heading on;
SQL> set verify on;
SQL> 
SQL> --exit;
SQL> 
SQL> @$LOAD/constraints/population_frequency.disable.sql
SQL> 
SQL> alter table POPULATION_FREQUENCY disable constraint SYS_C004638;

Table altered.

SQL> alter table POPULATION_FREQUENCY disable constraint SYS_C004639;

Table altered.

SQL> alter table POPULATION_FREQUENCY disable constraint SYS_C004640;

Table altered.

SQL> alter table POPULATION_FREQUENCY disable constraint SYS_C004641;

Table altered.

SQL> alter table POPULATION_FREQUENCY disable constraint SYS_C004642;

Table altered.

SQL> alter table POPULATION_FREQUENCY disable constraint SYS_C004643;

Table altered.

SQL> alter table POPULATION_FREQUENCY disable constraint SYS_C004644;

Table altered.

SQL> alter table POPULATION_FREQUENCY disable constraint SYS_C004645;

Table altered.

SQL> alter table POPULATION_FREQUENCY disable constraint PFBIGID;

Table altered.

SQL> 
SQL> alter table POPULATION_FREQUENCY disable primary key;

Table altered.

SQL> 
SQL> --EXIT;
SQL> @$LOAD/triggers/population_frequency.disable.sql
SQL> 
SQL> --EXIT;
SQL> @$LOAD/indexes/population_frequency.drop.sql
SQL> 
SQL> drop index POPULATNCY_BIG_ID_LWR;

Index dropped.

SQL> drop index POPULATNCY_BIG_ID;

Index dropped.

SQL> drop index POPULATIENCY_ETHNICITY_LWR;

Index dropped.

SQL> drop index POPULATIENCY_TYPE_LWR;

Index dropped.

SQL> drop index POPULATIENCY_SNP_PROBES_LWR;

Index dropped.

SQL> drop index POPULATIENCY_MINOR_ALLE_LWR;

Index dropped.

SQL> drop index POPULATIENCY_MAJOR_ALLE_LWR;

Index dropped.

SQL> drop index POPULATIENCY_MAJOR_FREQ;

Index dropped.

SQL> drop index POPULATIENCY_ETHNICITY;

Index dropped.

SQL> drop index POPULATIENCY_TYPE;

Index dropped.

SQL> drop index POPULATIENCY_ID;

Index dropped.

SQL> drop index POPULATIENCY_SNP_PROBES;

Index dropped.

SQL> drop index POPULATIENCY_MINOR_ALLE;

Index dropped.

SQL> drop index POPULATIENCY_MAJOR_ALLE;

Index dropped.

SQL> drop index POPULATIENCY_SNP_ID;

Index dropped.

SQL> drop index POPULATIENCY_HETEROZYGO;

Index dropped.

SQL> drop index POPULATIENCY_MINOR_FREQ;

Index dropped.

SQL> 
SQL> --EXIT;
SQL> exit;
Disconnected from Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit Production
With the Partitioning, Data Mining and Real Application Testing options

Load completed - logical record count 2341775.

SQL*Plus: Release 10.2.0.1.0 - Production on Wed May 6 16:13:14 2009

Copyright (c) 1982, 2005, Oracle.  All rights reserved.


Connected to:
Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit Production
With the Partitioning, Data Mining and Real Application Testing options


Index created.


Index created.


Index created.


Index created.


Index created.


Index created.


Index created.


Index created.


Index created.


Index created.


Index created.


Index created.


Index created.


Index created.


Index created.

(ID) tablespace CABIO_FUT
 *
ERROR at line 2:
ORA-01408: such column list already indexed


alter table POPULATION_FREQUENCY enable constraint SYS_C004646 using index SYS_C004646_idx
*
ERROR at line 1:
ORA-01418: specified index does not exist



Table altered.


Table altered.


Table altered.


Table altered.


Table altered.


Table altered.


Table altered.


Table altered.


Table altered.


Table altered.

Disconnected from Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit Production
With the Partitioning, Data Mining and Real Application Testing options
