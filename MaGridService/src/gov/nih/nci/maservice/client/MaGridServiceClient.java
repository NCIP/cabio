package gov.nih.nci.maservice.client;

import java.io.InputStream;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.util.ArrayList;
import java.util.List;
import java.io.StringWriter;
import java.io.FileInputStream;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.cagrid.common.Utils;
import gov.nih.nci.iso21090.St;
import gov.nih.nci.maservice.stubs.MaGridServicePortType;
import gov.nih.nci.maservice.stubs.service.MaGridServiceAddressingLocator;
import gov.nih.nci.maservice.util.GeneSearchCriteria;
import gov.nih.nci.maservice.common.MaGridServiceI;
import gov.nih.nci.maservice.domain.Gene;
import gov.nih.nci.maservice.domain.AgentAssociation;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;
import gov.nih.nci.cagrid.cqlquery.CQLQuery;
import gov.nih.nci.cagrid.cqlresultset.CQLQueryResults;
import gov.nih.nci.cagrid.data.DataServiceConstants;
import gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class MaGridServiceClient extends MaGridServiceClientBase implements MaGridServiceI {	

	public MaGridServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public MaGridServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public MaGridServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public MaGridServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(MaGridServiceClient.class.getName() + " -url <service url>");
	}

	public void testQuery() throws RemoteException
	{
		System.out.println("##################################");
		System.out.println("# test Query operation");
		System.out.println("##################################");

		List gList = new ArrayList();
		try
		{
			CQLQuery query = new CQLQuery();
	
			gov.nih.nci.cagrid.cqlquery.Object target = 
			    new gov.nih.nci.cagrid.cqlquery.Object();
			target.setName("gov.nih.nci.maservice.domain.Gene");
			query.setTarget(target);
			            
			gov.nih.nci.cagrid.cqlquery.Association assoc =  
			    new gov.nih.nci.cagrid.cqlquery.Association();
			assoc.setName("gov.nih.nci.iso21090.St");
			assoc.setRoleName("symbol");
			target.setAssociation(assoc);
	
			gov.nih.nci.cagrid.cqlquery.Attribute attr =  
			    new gov.nih.nci.cagrid.cqlquery.Attribute();
			attr.setName("value");
			attr.setValue("BRCA1");
			attr.setPredicate(gov.nih.nci.cagrid.cqlquery.Predicate.LIKE);
			assoc.setAttribute(attr);
			CQLQueryResults results = this.query(query);
					
			StringWriter w = new StringWriter();
			Utils
					.serializeObject(
							results,
							DataServiceConstants.CQL_RESULT_SET_QNAME, w);			
			System.out.println(w.getBuffer());			
			
			CQLQueryResultsIterator iterator = new CQLQueryResultsIterator(
					results,
					new FileInputStream(
							"src/gov/nih/nci/maservice/client/client-config.wsdd"));
			while (iterator.hasNext()) {
				gList.add(iterator.next());
			}
		} catch ( Exception ex)
		{
			ex.printStackTrace();
		}
		for (Iterator i = gList.iterator(); i.hasNext();) {
			Gene x = (Gene) i.next();
			System.out.println("testQuery Gene Id: " + x.getId().getExtension() + " Fullname:"+ x.getFullName().getValue());
		}		
	}
	
	public void testGetGeneBySymbol() throws RemoteException
	{
		System.out.println("##################################");
		System.out.println("# test GetGeneBySymbol operation");
		System.out.println("##################################");
		GeneSearchCriteria geneSearchCriteria = new GeneSearchCriteria();
		St symbolOrAlias = new St();
		symbolOrAlias.setValue("BRCA1");
		geneSearchCriteria.setSymbolOrAlias(symbolOrAlias);
		Gene[] genes = this.getGenesBySymbol(geneSearchCriteria);
		
		if ( genes!=null && genes.length > 0)
		{
			System.out.println( "Gene Symbol: " + genes[0].getSymbol().getValue()
					            + " Full Name: " + genes[0].getFullName().getValue());
		}
	}

	public void testGetAgentAssociation() throws RemoteException
	{
		GeneSearchCriteria geneSearchCriteria = new GeneSearchCriteria();
		St symbolOrAlias = new St();
		symbolOrAlias.setValue("BRCA1");
		geneSearchCriteria.setSymbolOrAlias(symbolOrAlias);
		AgentAssociation[] aas = this.getAgentAssociations(geneSearchCriteria);
		
		if ( aas!=null && aas.length > 0)
		{
			System.out.println( "Agent Association: " + aas[0].getSource().getValue());
		}
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  MaGridServiceClient client = new MaGridServiceClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			  
			  client.testGetGeneBySymbol();
			  client.testGetAgentAssociation();
			  //client.testQuery();
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public gov.nih.nci.maservice.domain.Gene[] getGenesBySymbol(gov.nih.nci.maservice.util.GeneSearchCriteria geneSearchCriteria) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getGenesBySymbol");
    gov.nih.nci.maservice.stubs.GetGenesBySymbolRequest params = new gov.nih.nci.maservice.stubs.GetGenesBySymbolRequest();
    gov.nih.nci.maservice.stubs.GetGenesBySymbolRequestGeneSearchCriteria geneSearchCriteriaContainer = new gov.nih.nci.maservice.stubs.GetGenesBySymbolRequestGeneSearchCriteria();
    geneSearchCriteriaContainer.setGeneSearchCriteria(geneSearchCriteria);
    params.setGeneSearchCriteria(geneSearchCriteriaContainer);
    gov.nih.nci.maservice.stubs.GetGenesBySymbolResponse boxedResult = portType.getGenesBySymbol(params);
    return boxedResult.getGene();
    }
  }

  public gov.nih.nci.maservice.domain.Gene[] getHomologousGenes(gov.nih.nci.maservice.domain.Organism organism,gov.nih.nci.maservice.util.GeneSearchCriteria geneSearchCriteria) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getHomologousGenes");
    gov.nih.nci.maservice.stubs.GetHomologousGenesRequest params = new gov.nih.nci.maservice.stubs.GetHomologousGenesRequest();
    gov.nih.nci.maservice.stubs.GetHomologousGenesRequestOrganism organismContainer = new gov.nih.nci.maservice.stubs.GetHomologousGenesRequestOrganism();
    organismContainer.setOrganism(organism);
    params.setOrganism(organismContainer);
    gov.nih.nci.maservice.stubs.GetHomologousGenesRequestGeneSearchCriteria geneSearchCriteriaContainer = new gov.nih.nci.maservice.stubs.GetHomologousGenesRequestGeneSearchCriteria();
    geneSearchCriteriaContainer.setGeneSearchCriteria(geneSearchCriteria);
    params.setGeneSearchCriteria(geneSearchCriteriaContainer);
    gov.nih.nci.maservice.stubs.GetHomologousGenesResponse boxedResult = portType.getHomologousGenes(params);
    return boxedResult.getGene();
    }
  }

  public gov.nih.nci.maservice.domain.Gene[] getGenesByMicroarrayReporter(gov.nih.nci.maservice.util.ReporterSearchCriteria reporterSearchCriteria) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getGenesByMicroarrayReporter");
    gov.nih.nci.maservice.stubs.GetGenesByMicroarrayReporterRequest params = new gov.nih.nci.maservice.stubs.GetGenesByMicroarrayReporterRequest();
    gov.nih.nci.maservice.stubs.GetGenesByMicroarrayReporterRequestReporterSearchCriteria reporterSearchCriteriaContainer = new gov.nih.nci.maservice.stubs.GetGenesByMicroarrayReporterRequestReporterSearchCriteria();
    reporterSearchCriteriaContainer.setReporterSearchCriteria(reporterSearchCriteria);
    params.setReporterSearchCriteria(reporterSearchCriteriaContainer);
    gov.nih.nci.maservice.stubs.GetGenesByMicroarrayReporterResponse boxedResult = portType.getGenesByMicroarrayReporter(params);
    return boxedResult.getGene();
    }
  }

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults query(gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"query");
    gov.nih.nci.cagrid.data.QueryRequest params = new gov.nih.nci.cagrid.data.QueryRequest();
    gov.nih.nci.cagrid.data.QueryRequestCqlQuery cqlQueryContainer = new gov.nih.nci.cagrid.data.QueryRequestCqlQuery();
    cqlQueryContainer.setCQLQuery(cqlQuery);
    params.setCqlQuery(cqlQueryContainer);
    gov.nih.nci.cagrid.data.QueryResponse boxedResult = portType.query(params);
    return boxedResult.getCQLQueryResultCollection();
    }
  }

  public gov.nih.nci.maservice.domain.AgentAssociation[] getAgentAssociations(gov.nih.nci.maservice.util.GeneSearchCriteria geneSearchCriteria) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getAgentAssociation");
    gov.nih.nci.maservice.stubs.GetAgentAssociationsRequest params = new gov.nih.nci.maservice.stubs.GetAgentAssociationsRequest();
    gov.nih.nci.maservice.stubs.GetAgentAssociationsRequestGeneSearchCriteria geneSearchCriteriaContainer = new gov.nih.nci.maservice.stubs.GetAgentAssociationsRequestGeneSearchCriteria();
    geneSearchCriteriaContainer.setGeneSearchCriteria(geneSearchCriteria);
    params.setGeneSearchCriteria(geneSearchCriteriaContainer);
    gov.nih.nci.maservice.stubs.GetAgentAssociationsResponse boxedResult = portType.getAgentAssociations(params);
    return boxedResult.getAgentAssociation();
    }
  }

  public gov.nih.nci.maservice.domain.BiologicalProcess[] getBiologicalProcesses(gov.nih.nci.maservice.util.GeneSearchCriteria geneSearchCriteria) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getBiologicalProcesses");
    gov.nih.nci.maservice.stubs.GetBiologicalProcessesRequest params = new gov.nih.nci.maservice.stubs.GetBiologicalProcessesRequest();
    gov.nih.nci.maservice.stubs.GetBiologicalProcessesRequestGeneSearchCriteria geneSearchCriteriaContainer = new gov.nih.nci.maservice.stubs.GetBiologicalProcessesRequestGeneSearchCriteria();
    geneSearchCriteriaContainer.setGeneSearchCriteria(geneSearchCriteria);
    params.setGeneSearchCriteria(geneSearchCriteriaContainer);
    gov.nih.nci.maservice.stubs.GetBiologicalProcessesResponse boxedResult = portType.getBiologicalProcesses(params);
    return boxedResult.getBiologicalProcess();
    }
  }

  public gov.nih.nci.maservice.domain.CellularComponent[] getCellularLocations(gov.nih.nci.maservice.util.GeneSearchCriteria geneSearchCriteria) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getCellularLocations");
    gov.nih.nci.maservice.stubs.GetCellularLocationsRequest params = new gov.nih.nci.maservice.stubs.GetCellularLocationsRequest();
    gov.nih.nci.maservice.stubs.GetCellularLocationsRequestGeneSearchCriteria geneSearchCriteriaContainer = new gov.nih.nci.maservice.stubs.GetCellularLocationsRequestGeneSearchCriteria();
    geneSearchCriteriaContainer.setGeneSearchCriteria(geneSearchCriteria);
    params.setGeneSearchCriteria(geneSearchCriteriaContainer);
    gov.nih.nci.maservice.stubs.GetCellularLocationsResponse boxedResult = portType.getCellularLocations(params);
    return boxedResult.getCellularComponent();
    }
  }

  public gov.nih.nci.maservice.domain.DiseaseAssociation[] getDiseaseAssociations(gov.nih.nci.maservice.util.GeneSearchCriteria geneSearchCriteria) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getDiseaseAssociations");
    gov.nih.nci.maservice.stubs.GetDiseaseAssociationsRequest params = new gov.nih.nci.maservice.stubs.GetDiseaseAssociationsRequest();
    gov.nih.nci.maservice.stubs.GetDiseaseAssociationsRequestGeneSearchCriteria geneSearchCriteriaContainer = new gov.nih.nci.maservice.stubs.GetDiseaseAssociationsRequestGeneSearchCriteria();
    geneSearchCriteriaContainer.setGeneSearchCriteria(geneSearchCriteria);
    params.setGeneSearchCriteria(geneSearchCriteriaContainer);
    gov.nih.nci.maservice.stubs.GetDiseaseAssociationsResponse boxedResult = portType.getDiseaseAssociations(params);
    return boxedResult.getDiseaseAssociation();
    }
  }

  public gov.nih.nci.maservice.domain.MolecularFunction[] getFunctionalAssociations(gov.nih.nci.maservice.util.GeneSearchCriteria geneSearchCriteria) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getFunctionalAssociations");
    gov.nih.nci.maservice.stubs.GetFunctionalAssociationsRequest params = new gov.nih.nci.maservice.stubs.GetFunctionalAssociationsRequest();
    gov.nih.nci.maservice.stubs.GetFunctionalAssociationsRequestGeneSearchCriteria geneSearchCriteriaContainer = new gov.nih.nci.maservice.stubs.GetFunctionalAssociationsRequestGeneSearchCriteria();
    geneSearchCriteriaContainer.setGeneSearchCriteria(geneSearchCriteria);
    params.setGeneSearchCriteria(geneSearchCriteriaContainer);
    gov.nih.nci.maservice.stubs.GetFunctionalAssociationsResponse boxedResult = portType.getFunctionalAssociations(params);
    return boxedResult.getMolecularFunction();
    }
  }

  public gov.nih.nci.maservice.domain.SingleNucleotidePolymorphism[] getStructuralVariations(gov.nih.nci.maservice.util.GeneSearchCriteria geneSearchCriteria) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getStructuralVariations");
    gov.nih.nci.maservice.stubs.GetStructuralVariationsRequest params = new gov.nih.nci.maservice.stubs.GetStructuralVariationsRequest();
    gov.nih.nci.maservice.stubs.GetStructuralVariationsRequestGeneSearchCriteria geneSearchCriteriaContainer = new gov.nih.nci.maservice.stubs.GetStructuralVariationsRequestGeneSearchCriteria();
    geneSearchCriteriaContainer.setGeneSearchCriteria(geneSearchCriteria);
    params.setGeneSearchCriteria(geneSearchCriteriaContainer);
    gov.nih.nci.maservice.stubs.GetStructuralVariationsResponse boxedResult = portType.getStructuralVariations(params);
    return boxedResult.getSingleNucleotidePolymorphism();
    }
  }

}
