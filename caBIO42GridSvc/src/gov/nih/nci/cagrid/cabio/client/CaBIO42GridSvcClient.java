package gov.nih.nci.cagrid.cabio.client;

import java.io.FileInputStream;
import java.io.InputStream;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.util.ArrayList;
import java.util.List;
import java.io.StringWriter;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.cagrid.cabio.stubs.CaBIO42GridSvcPortType;
import gov.nih.nci.cagrid.cabio.stubs.service.CaBIO42GridSvcServiceAddressingLocator;
import gov.nih.nci.cagrid.cabio.common.CaBIO42GridSvcI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;
import gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator;
import gov.nih.nci.cagrid.common.Utils;
import gov.nih.nci.cagrid.cqlquery.CQLQuery;
import gov.nih.nci.cagrid.cqlresultset.CQLQueryResults;
import gov.nih.nci.cagrid.data.DataServiceConstants;

import gov.nih.nci.cabio.domain.Taxon;
import gov.nih.nci.common.domain.DatabaseCrossReference;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class CaBIO42GridSvcClient extends CaBIO42GridSvcClientBase implements CaBIO42GridSvcI {	

	public CaBIO42GridSvcClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public CaBIO42GridSvcClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public CaBIO42GridSvcClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public CaBIO42GridSvcClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(CaBIO42GridSvcClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  CaBIO42GridSvcClient client = new CaBIO42GridSvcClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			  client.testGetTaxonByGene();
			  client.testGetDBXRefsByGene();
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults query(gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"query");
    gov.nih.nci.cagrid.data.QueryRequest params = new gov.nih.nci.cagrid.data.QueryRequest();
    gov.nih.nci.cagrid.data.QueryRequestCqlQuery cqlQueryContainer = new gov.nih.nci.cagrid.data.QueryRequestCqlQuery();
    cqlQueryContainer.setCQLQuery(cqlQuery);
    params.setCqlQuery(cqlQueryContainer);
    gov.nih.nci.cagrid.data.QueryResponse boxedResult = portType.query(params);
    return boxedResult.getCQLQueryResultCollection();
    }
  }

	public void testGetTaxonByGene() {

		// Get gene from grid service
		List gXRefList = new ArrayList();
		try {
			System.out.println("============= testGetTaxonByGene =======================================");
			
			CQLQuery query = (CQLQuery) Utils.deserializeDocument(
					"test/resources/TaxonGeneAssoc.xml", CQLQuery.class);
			CQLQueryResults results = this.query(query);
			
			StringWriter w = new StringWriter();
			Utils
					.serializeObject(
							results,
							DataServiceConstants.CQL_RESULT_SET_QNAME, w);			
			System.out.println(w.getBuffer());			
			
			CQLQueryResultsIterator iterator = new CQLQueryResultsIterator(
					results,
					new FileInputStream(
							"src/gov/nih/nci/cagrid/cabio/client/client-config.wsdd"));
			while (iterator.hasNext()) {
				gXRefList.add(iterator.next());
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		
		for (Iterator i = gXRefList.iterator(); i.hasNext();) {
			Taxon x = (Taxon) i.next();
			System.out.println("testGetTaxonByGene Taxon Id: " + x.getId());
		}
	}
	
	public void testGetDBXRefsByGene() {

		// Get gene from grid service
		List gXRefList = new ArrayList();
		try {
			CQLQuery query = (CQLQuery) Utils.deserializeDocument(
					"test/resources/dbxref1.xml", CQLQuery.class);
			CQLQueryResults results = this.query(query);
			CQLQueryResultsIterator iterator = new CQLQueryResultsIterator(
					results,
					new FileInputStream(
							"src/gov/nih/nci/cagrid/cabio/client/client-config.wsdd"));
			while (iterator.hasNext()) {
				gXRefList.add(iterator.next());
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		System.out.println("================== testGetDBXRefsByGene ===============================");
		for (Iterator i = gXRefList.iterator(); i.hasNext();) {
			DatabaseCrossReference x = (DatabaseCrossReference) i.next();
			System.out.println("testGetDBXRefsByGene DCR Id: " + x.getId());
		}
	}  
}
