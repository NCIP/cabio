<?xml version="1.0" encoding="utf-8" ?>
<!--
$Id: install.xml 4757 2008-05-15 20:43:31Z zengje $
$HeadURL: http://gforge.nci.nih.gov/svnroot/cabiodb/cabioapi/trunk/software/build/install.xml $
-->
<project name="cabio-installer" default="upgrade" basedir="." 
	xmlns:ivy="antlib:org.apache.ivy.ant"
	>
	<description>
		This build file is part of the bda-build-templates project. This is the master install file for the project.  It should be placed in project/software.  This script is copied into the distribution and  executed from the extracted distribution.  It is run by typing "ant" from the master project build.xml or from command line. This script has two flows install and upgrade.
		Install will do the following
 			* Install binaries
			* Configure binaries
			* Install application
			* Configure application
			* Re-create database
			* Upgrade database
		Upgrade will do the following
			* Install application
			* Configure application
			* Upgrade database
		The script includes target that may not be used by all projects, but are included in here becaue it is a template. This script has targets to deal with the following, you can delete targets you don't want to work with
		Application servers (option for grid services also)
			* JBoss
			* Tomcat
		Databases
			* MySQL
			* PostgreSQL
			* Oracle
		This script requires java and ant to run. Every thing else it needs is included in the distribution.
	</description>

	<!-- Properties file related properties and tasks -->
	<property environment="env" />
	<property file="local.properties"/>
	<property file="project.properties"/>
	<property name="properties.file" value="${basedir}/install.properties"/>
	<echo message="Using properties file of ${properties.file}."/>
	<available file="${properties.file}" property="properties.file.exists" />
	<fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail."/>
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2"/>
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2"/>
	<property file="${properties.file}" />
	<property name="env.name" value="local"/>
	<!-- Set application.base.path based on platform -->
	<condition property="application.base.path" value="${application.base.path.linux}">
		<or>
			<os family="unix" />
			<os family="mac" />
		</or>
	</condition>

	<condition property="application.base.path" value="${application.base.path.windows}">
		<os family="windows" />
	</condition>
	<echo message="application.base.path=${application.base.path}"/>
	<property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
	<property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>

	<!--OS Temp dir -->
	<condition property="os.temp.dir" value="/tmp">
		<or>
			<os family="unix" />
			<os family="mac" />
		</or>
	</condition>

	<condition property="os.temp.dir" value="c:/temp">
		<os family="windows" />
	</condition>
	<property name="project.name" value="cabio"/>
	
	<!-- Generic properties -->
	<property name="log.dir" value="${basedir}/logs" />
	<property name="working.dir" value="${basedir}/working" />
	<property name="temp.dir" value="${working.dir}/temp" />


	<!-- Install Time properties -->
	<!-- Source and target directories -->
	<property name="bda-utils.dir" value="bda-utils" />
	<property name="tools.dir" value="${basedir}/${tools.dist.relative.dir}" />
	<property name="common.dir.src" value="${basedir}/${common.dist.relative.dir}" />
	<property name="common.dir.dest" value="${working.dir}/${common.dist.relative.dir}" />
	<property name="db.dir.src" value="${basedir}/${db.dist.relative.dir}" />
	<property name="db.dir.dest" value="${working.dir}/${db.dist.relative.dir}" />
	<property name="db-install.dir.dest" value="${working.dir}/${db-install.dist.relative.dir}" />
	<property name="db-upgrade.dir.dest" value="${working.dir}/${db-upgrade.dist.relative.dir}" />
	<property name="jboss-conf.dir.src" value="${basedir}/${jboss-conf.dist.relative.dir}" />
	<property name="jboss-conf.dir.dest" value="${working.dir}/${jboss-conf.dist.relative.dir}" />
	<property name="cabio-conf.dir.src" value="${basedir}/${cabio-conf.dist.relative.dir}" />
	<property name="cabio-conf.dir.dest" value="${working.dir}/${cabio-conf.dist.relative.dir}" />
	<!-- property name="jboss-cabio-conf.dir" value="${jboss.home}/server/${jboss.server.name}/data" / -->
    	<property name="cabio.propertyservice.cacore.property.value" value="${jboss-cabio-conf.dir}/cacore.properties" />
	<property name="cabio-indexes.dir.src" value="${basedir}/${cabio-indexes.dist.relative.dir}" />
	<property name="cabio-indexes.dir.dest" value="${working.dir}/${cabio-indexes.dist.relative.dir}" />
    

	<!-- Jboss binding configurtion related properties -->
	<property name="jboss.binding.template.location" value="${bda-utils.dir}/resource/${jboss.template.relative.dir}/bindings.xml"/>
	<property name="jboss.service.template.location" value="${bda-utils.dir}/resource/${jboss.template.relative.dir}/jboss-service.xml"/>

	<!-- *-ds.xml and WAR -->
	<property name="cabio-webapp.dir.dist" value="${basedir}/${cabio-webapp.dist.relative.dir}" />
	<property name="cabio-webapp.ds.file" value="cabio-ds.xml" />
	<property name="cabio-webapp.war.file" value="${cabio-webapp.project.name}.war" />

	<!-- Grid related properties -->
	<property name="grid.resource.dir" value="${basedir}/${grid.dist.relative.dir}" />
	<property name="grid.application.dir" value="${basedir}/${grid-sample.dist.relative.dir}" />
	<property name="grid.artifact.file" value="sample-wsrf-war.zip" />
	<property name="grid.dir.dest" value="wsrf" />
	<property name="grid.application.name" value="Sample" />
	<property name="resource.file.jboss-globus-lib" value="jboss-globus-libs-cagrid1_1.zip" />
	<property name="resource.file.jboss-globus-war" value="jboss-globus-wsrf-war-cagrid1_1.zip" />
	<property name="grid.secure.key.file.location" value="${security.dir.src}/${grid.secure.key.file}"/>
	<property name="grid.secure.cert.file.location" value="${security.dir.src}/${grid.secure.cert.file}"/>

	<!-- Default to false, properties can override -->
	<property name="grid.secure.enable" value="false"/>
	<property name="jboss.ssl.enable" value="false"/>
	<property name="tomcat.ssl.enable" value="false"/>


	<!-- Paths -->
	<path id="bda-utils.classpath">
		<fileset dir="${bda-utils.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!-- Task definitions -->
	<taskdef uri="antlib:org.apache.ant.antunit" resource="org/apache/ant/antunit/antlib.xml" classpathref="bda-utils.classpath" />
	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="bda-utils.classpath"/>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="bda-utils.classpath"/>
	<taskdef resource="liquibasetasks.properties" classpathref="bda-utils.classpath"/>
	<taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="bda-utils.classpath"/>		
	
	<!-- Conditionals -->
	<available file="${jboss.home}/server/${jboss.server.name}/conf/jboss-service.xml" property="jboss.exists"/>
	<!-- cabio-webapp can use either Oracle or MySQL or PostgreSQL as its database platform, this is controled by the database.type property.  Based on the value of this property sent several variables for use during install -->
	<switch value="${database.type}">
		<case value="oracle">
			<property name="database.dialect" value="org.hibernate.dialect.OracleDialect"/>
			<property name="database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.4.0.jar"/>
			<property name="database.driver" value="oracle.jdbc.driver.OracleDriver"/>
			<property name="db-upgrade.list.file" value="${db-upgrade.oracle.list.file}"/>
			<property name="db-upgrade.conf.file" value="${db-upgrade.oracle.conf.file}"/>
			<property name="database.schema" value="${database.name}"/>
		</case>
		<case value="mysql">
			<property name="database.dialect" value="org.hibernate.dialect.MySQLDialect"/>
			<property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.5.jar"/>
			<property name="database.driver" value="com.mysql.jdbc.Driver"/>
			<property name="db-upgrade.list.file" value="${db-upgrade.mysql.list.file}"/>
			<property name="db-upgrade.conf.file" value="${db-upgrade.mysql.conf.file}"/>
			<property name="database.schema" value="${database.name}"/>
		</case>
		<case value="postgresql">
			<property name="database.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
			<property name="database.driver.file" value="${bda-utils.dir}/postgresql-jdbc3-8.3-603.jar"/>
			<property name="database.driver" value="org.postgresql.Driver"/>
			<property name="db-upgrade.list.file" value="${db-upgrade.postgresql.list.file}"/>
			<property name="db-upgrade.conf.file" value="${db-upgrade.postgresql.conf.file}"/>
			<property name="database.schema" value="public"/>
		</case>
		<default>
			<fail message="Invalid database type ${database.type}"/>
		</default>
	</switch>

	<path id="jdbc.driver.classpath">
		<pathelement location="${database.driver.file}"/>
	</path>

	<!-- Includes-->
	<import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

	<!-- Read db configs from existing ds.xml if it exists for use in upgrade installs, if already set in properties file values from properties file will be used -->
	<available file="${jboss.home}/server/${jboss.server.name}/deploy/${cabio-webapp.ds.file}" property="ds.exists"/>
	<if>
		<isset property="ds.exists"/>
		<then>
		</then>
		<else>
			<echo message="Warning- could not find ${jboss.home}/server/${jboss.server.name}/deploy/${cabio-webapp.ds.file}"/>
		</else>
	</if>
	<!-- figure out whether to use install-properties.template or upgrade-proprties.template based on the name of the properties file -->
	<propertyregex property="properties.file.type"
		input="${properties.file}"
		regexp=".*(install|upgrade).*"
		select="\1"     
		/>              
	<echo message="Properties file type = ${properties.file.type}"/>
	<switch value="${properties.file.type}">
		<case value="install">
			<property name="properties.template.file" value="install-properties.template" />
		</case>         
		<case value="upgrade">
			<property name="properties.template.file" value="upgrade-properties.template" />
		</case>         
		<default>       
			<fail message="Property file name must include 'install' or 'upgrade' so it can be determined which properties template should be used. If you are not certain include 'upgrade' in the name of your proeprties file."/>
		</default>      
	</switch>


	<!-- Added to convert location to file and path -->
	<basename file="${jboss.ssl.keystore.location}" property="jboss.ssl.keystore.file"/>
	<dirname file="${jboss.ssl.keystore.location}" property="jboss.ssl.keystore.dir"/>
	<basename file="${tomcat.ssl.keystore.location}" property="tomcat.ssl.keystore.file"/>
	<dirname file="${tomcat.ssl.keystore.location}" property="tomcat.ssl.keystore.dir"/>
	<basename file="${grid.secure.cert.location}" property="grid.secure.cert.file"/>
	<dirname file="${grid.secure.cert.location}" property="grid.secure.dir"/>
	<basename file="${grid.secure.key.location}" property="grid.secure.key.file"/>

	<!-- Start logging --> 
	<property name="install-logs.dir" location="${log.dir}"/>
	<mkdir dir="${install-logs.dir}"/>
	<tstamp>
		<format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
	</tstamp>
	<record name="${install-logs.dir}/install-${install.time}.log" action="start"/>

	<!-- Installer section -->
	<target name="diag">
		<echoproperties/>
	</target>

	<!-- Clean up destination directory -->
	<target name="install:clean" description="Removes all files from the local filesystem" depends="install:clean:jboss,install:clean:tomcat"/>

	<target name="install:clean:jboss" unless="exclude.jboss">
		<sleep seconds="5" />
		<property name="backup.count" value="5"/>

		<if>
			<not>
				<equals arg1="${exclude.jboss.backup}" arg2="true"/>
			</not>
			<then>
				<!-- Jboss backup, do not compress until install is finished -->
				<property name="backup.jboss.base.dir" location="${user.home}/backup/jboss"/>
		
				<!-- So these directories won't be included in the backup, they are not needed to use jboss -->
				<delete dir="${jboss.home}/server/${jboss.server.name}/work"/>
				<delete dir="${jboss.home}/server/${jboss.server.name}/tmp"/>
		
				<backup-dir
					src.dir="${jboss.home}"
					backup.base.dir="${backup.jboss.base.dir}"
					backup.count="${backup.count}"
					/>
			</then>
		</if>
		<delete dir="${jboss.home}"/>
	</target>

	<target name="install:clean:tomcat" unless="exclude.tomcat">
		<sleep seconds="5" />
		<property name="backup.count" value="5"/>
		<if>
			<not>
				<equals arg1="${exclude.tomcat.backup}" arg2="true"/>
			</not>
			<then>
				<property name="backup.tomcat.base.dir" location="${application.base.path}/backup/tomcat"/>
		
				<backup-dir
					src.dir="${tomcat.home}"
					backup.base.dir="${backup.tomcat.base.dir}"
					backup.count="${backup.count}"
					/>
			</then>
		</if>
		<delete dir="${tomcat.home}"/>
	</target>

	<!-- Does directory management and copy some files with filtering to ensure token expansion -->
	<target name="install:init" description="Does directory management to initialize install">
		<math result="jboss.ssl.port" operand1="${jboss.server.port}" operation="+" operand2="363" datatype="int"/>
		<filterset id="embedded.filterset">
			<filter token="application.base.path" value="${application.base.path}"/>
			<filter token="application.url" value="${application.url}"/>
			<filter token="database.url" value="${database.url}"/>
			<filter token="database.user" value="${database.user}"/>
			<filter token="database.password" value="${database.password}"/>
			<filter token="database.system.url" value="${database.system.url}"/>
			<!-- added internal properties that may be used in a filtered copy -->
			<filter token="database.driver" value="${database.driver}"/>
			<!-- added for liquibase -->
			<filter token="db-upgrade.run.dir" value="${db-upgrade.dir.dest}/${database.type}"/>
			<filter token="jboss.home" value="${jboss.home}"/>
			<filter token="tomcat.home" value="${jboss.home}"/>
			<filter token="database.dialect" value="${database.dialect}"/>
			<filter token="hibernate.cfg.file.path" value="${hibernate.cfg.file.path}"/>
                  <filter token="cabio-conf.handler_path" value="${jboss-cabio-conf.dir}/svr_1"/>
		</filterset>
	
		<property name="db.prop.list" value="database.url,database.user,database.password,database.name"/>
		<echo  message="Checking if database properties exist: ${db.prop.list}"/>
		<properties-exist properties.list="${db.prop.list}"/>
		<mkdir dir="${working.dir}" />
		<delete dir="${working.dir}"/>
		<mkdir dir="${working.dir}" />
		<!-- Copy files to ensure values containing variables are expanded, such properties are stored in embedded.filterset and then copy with filter files -->
		<copy todir="${common.dir.dest}" filtering="true">
			<fileset dir="${common.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="embedded.filterset"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy>             
		<copy todir="${cabio-conf.dir.dest}" filtering="true">
			<fileset dir="${cabio-conf.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="embedded.filterset"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy> 
                          
            <!-- make sure the index_base and CACHE_PATH folders exists when installing caBIO Web App -->
            <echo message="make sure the index_base: ${cabio-webapp.index_base} and CACHE_PATH: ${cabio-webapp.cache_path}   folders exists when installing caBIO Web App"/> 
            <if>
                  <not>
                        <available file="${cabio-webapp.index_base}"/>
                  </not>                                
                  <then>                                
                        <mkdir dir="${cabio-webapp.index_base}" />
                  </then>
            </if>                 
            <if>
                  <not>
                        <available file="${cabio-webapp.cache_path}"/>
                  </not>                                
                  <then>                                
                        <mkdir dir="${cabio-webapp.cache_path}" />
                  </then>
            </if>                 
            
	</target>

	<!-- Wrapper install database target, depends on both MySQL and Oracle sub-targets, ifs should ensure only one is run.  Target path can be skipped by exlude.database also calls upgrade:database -->

	<target name="install:database:prep" description="Copies db files with filtering" unless="exclude.database" depends="install:init">
		<echoproperties prefix="database"/>
		<copy todir="${db.dir.dest}" filtering="true">
			<fileset dir="${db.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="embedded.filterset"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy>
		<mkdir dir="${os.temp.dir}/${project.name}"/>
		<copy todir="${os.temp.dir}/${project.name}" filtering="true" flatten="true" overwrite="true">
			<fileset dir="${db.dir.dest}">
				<include name="**/db-upgrade.xml"/>
			</fileset>
		</copy>
	</target>

	<target name="install:database" description="Runs datbase creation scripts then calls uprade database." unless="exclude.database"
		depends="
		install:init,
		install:database:prep
		">
		<!-- Drop all schema objects or re-create the db -->
		<database-clean/>
		<!-- Run baseline scripts stored in db.install.create.${database.type}.file.list variable -->
		<switch value="${database.type}">
			<case value="oracle">
				<database-install
					db.install.create.file.list="${db.install.create.oracle.file.list}"
					sql.delimiter="/"
					sql.delimitertype="row"
					/>
			</case>
			<case value="postgresql">
				<database-install
					db.install.create.file.list="${db.install.create.postgresql.file.list}"
					sql.delimiter="/"
					sql.delimitertype="row"
					/>
			</case>
			<case value="mysql">
				<database-install
					db.install.create.file.list="${db.install.create.mysql.file.list}"
					/>
			</case>
		</switch>
		<database-upgrade
			database.changelog.file="${os.temp.dir}/${project.name}/db-upgrade.xml"
			/>
		<database-tag/>
	</target>

	<target name="install:jboss:binaries" description="Install JBoss binaries" unless="exclude.jboss">
		<jboss-install-binaries
			/>
	</target>

	<target name="install:jboss:cabio-webapp" description="Deploy cabio-webapp and common libraries to jboss installation" unless="exclude.jboss" depends="install:database:indexes">
		<!-- added to ensure working.dirs are fresh for our install -->
		<delete dir="${jboss.home}/server/${jboss.server.name}/tmp"/>
		<delete dir="${jboss.home}/server/${jboss.server.name}/work"/>

		<copy file="${cabio-webapp.dir.dist}/${cabio-webapp.war.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
		<!--  Many NCI applications require clm for csm, so you can point this to where you have the version you want to use
		<copy file="${bda-utils.dir}/clm-3.2.jar" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
		-->
		<copy file="${database.driver.file}" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />            
	</target>

	<target name="install:jboss:cabio-webapp:configure" description="Configure cabio-webapp application, copies over externalized properties or configurations that are not part of the jboss configuration" unless="exclude.jboss">
		<!-- copy over any other files you may need to configure your application -->
		
		<!-- copy datasource file -->
		<copy file="${jboss-conf.dir.dest}/${cabio-webapp.ds.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
		<!-- copy JBoss-web.xml file -->
		<!--
		<copy file="${jboss-conf.dir.dest}/${jboss.web.xml.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
		-->
            <!-- This code is for updating properties.service.xml, make sure to add {line.separator} 
                 after each property def as the property delimiter, if this is not included you will 
                 not get the desired results. If you do not use properties service.xml you can delete this code. -->
            <var name="property.block" value="${cabio.propertyservice.cacore.property.name}=${cabio.propertyservice.cacore.property.value}${line.separator}"/>
            <jboss-update-properties-service property.block="${property.block}"/>
            <copy todir="${jboss-cabio-conf.dir}" overwrite="true">
                 <fileset dir="${cabio-conf.dir.dest}/data">
                      <include name="**/*" />
                 </fileset>
            </copy>
	</target>

	<target name="install:jboss:configure:log4j" description="Configure custom entries in system wide log4j" unless="exclude.jboss" >
		<echo message="Configuring Log4J"/>
		<!-- Insert an appender -->
		<!--<copy todir="${jboss.home}/server/${jboss.server.name}/conf" file="${jboss-conf.dir.src}/log4j.dtd"/>-->
		<!--
		<osfamily property="os.family"/>
		<echo message="os.family=${os.family}"/>
		<switch value="${os.family}">
			<case value="unix">
				<copy todir="${env.PWD}" file="${jboss-conf.dir.src}/log4j.dtd"/>
			</case>
			<case value="mac">
				<copy todir="${env.PWD}" file="${jboss-conf.dir.src}/log4j.dtd"/>
			</case>
			<case value="windows">
				<copy todir="${user.dir}" file="${jboss-conf.dir.src}/log4j.dtd"/>
			</case>
		</switch>
		

		<replaceregexp file="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml"
			byline="true"
			match="DOCTYPE log4j:configuration SYSTEM &quot;log4j.dtd&quot;"
			replace="DOCTYPE log4j:configuration"
			/>

		<xmltask source="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml"
			dest="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml">
			<xmlcatalog refid="bda.xml.catalog"/>
			<remove path="/log4j:configuration/appender[@name='TestAppender']"/>
			<insert path="/log4j:configuration">
				<![CDATA[
				<appender name="TestAppender" class="org.jboss.logging.appender.RollingFileAppender">
					<errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
					<param name="File" value="${jboss.server.log.dir}/testAppender.log"/>
					<param name="Append" value="false"/>
					<param name="MaxFileSize" value="${log4j.maxFileSize}"/>
					<param name="MaxBackupIndex" value="${log4j.maxDays}"/>

					<layout class="org.apache.log4j.PatternLayout">
						<param name="ConversionPattern" value="%d %-5p [%c] %m%n"/>
					</layout>           
				</appender>
				]]>
			</insert>
			<remove path="/log4j:configuration/category[@name='org.nih.nci']"/>
			<insert path="/log4j:configuration">
				<![CDATA[
				<category name="org.nih.nci">
					<priority value="${log4j.level}"/>
				</category>
				]]>
			</insert>
		</xmltask>
		<validate-log4j
			/>                              
		<replaceregexp file="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml"
			byline="true"
			match="DOCTYPE log4j:configuration"
			replace="DOCTYPE log4j:configuration SYSTEM &quot;log4j.dtd&quot;"
			/>
            -->
	</target>
	<target name="install:jboss:configure" description="Configure JBoss (bindings, login-config.xml, ect)" unless="exclude.jboss"
		depends="
			install:jboss:configure:log4j	
			">
		<!-- Calls the following macros
			jboss-bindings - configures ports for jboss
			jboss-login-config - sets up authentication
			secure-jboss-console - adds password to jboss console apps
			jboss-update-shutdown - updates shutdown.jar with correct jndi port so no args need to used 4 shutdown
			appserver-ssl-configure -  enables ssl
			appserver-configure-external-hostname - configures jboss for use through a reverse proxy
			grid-secure-configure-connector - configures secure grid
		-->
		<!-- Use below if you are defining all the ports in your install.xml not the NCICB port configuraitons-->
            <!-- 
		<jboss-configure
			jboss.server.ports.name="bda-ports"
			jboss.server.binding.template.location="${bda-utils.resource.dir}/template-binding.xml"
			/>
              -->
		<!-- Default values for all attributes if you are using standard NCICB port configurations
		<jboss-configure
			/>
			-->
	</target>


	<!-- Configure MQ settings based on contents of ncia/software/resrouces/deploy/jbossmq-destinations-service.block.xml -->
	<target name="-install:jboss:configure:jbossmq-dest" description="Configure MQ settings based on contents of software/common/resource/jboss-conf/jbossmq-destinations-service.block.xml" unless="exclude.jboss">
		<!-- Provide template to change jboss mq configurations 
		<property name="jboss-mq.block.file" value="${resource.dir.target}/jbossmq-destinations-service.block.xml"/>
		<xmlconfig in="${jboss.home}/server/${jboss.server.name}/deploy/jms/jbossmq-destinations-service.xml" verbose="false">
			<insertbranch path="//server" srcxmlfile="${jboss-mq.block.file}" srcpath="//mbean[1]" />
			<insertbranch path="//server" srcxmlfile="${jboss-mq.block.file}" srcpath="//mbean[2]" />
		</xmlconfig>
		-->
	</target>


	<!-- Calls to bda macros for basic functionality -->
	<target name="install:jboss:stop" description="Stops jboss" unless="exclude.jboss">
		<if>
			<isset property="jboss.exists"/>
			<then>
				<jboss-stop-jboss jboss.server.jndi.port="${jboss.server.jndi.port}"/>
			</then>
		</if>
	</target>

	<target name="install:jboss:start" description="Starts jboss" unless="exclude.jboss">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<jboss-start-jboss />
				<sleep seconds="15"/>
			</then>
		</if>
	</target>
	<target name="install:validation:pre-install" description="Runs pre-install validation checks bda-utils">
		<validate-pre-install
			ant.check.version="${ant.minimum.version}"
			java.check.version.major="${java.major.version}"
			java.check.version.minor="${java.minor.version}"
			database.version="${mysql.minimum.version}"
			/>
	</target>

	<target name="install:validation:pre-install:ports" description="Checks to see if configured ports are listenting and fails buld, meant to be run after jboss:stop">
		<validate-ports-preinstall />
	</target>

	<target name="install:validation:post-install" description="Run post-install checks from bda-utils">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<validate-post-install propertyfile.backup.location="${log.dir}" />
			</then>
		</if>
	</target>

	<!-- Wrapper target to deploy JBOSS container -->
	<!--
	<target name="install:jboss" description="Wrapper scripts that calls all required targets to install the jboss container" unless="exclude.jboss"
		depends="
		install:validation:pre-install,
		install:jboss:stop,
		install:validation:pre-install:ports,
		install:clean:jboss,
		install:init,
		install:jboss:binaries,
		install:jboss:cabio-webapp:re-configure,
		install:jboss:cabio-webapp,
		install:jboss:cabio-webapp:configure,
		install:jboss:configure,
		install:cabio-grid,
		install:post,
		install:jboss:start
		" />
	-->
	<target name="install:jboss" description="Wrapper scripts that calls all required targets to install the jboss container" unless="exclude.jboss"
		depends="
		install:validation:pre-install,
		install:jboss:stop,
		install:validation:pre-install:ports,
		install:clean:jboss,
		install:init,
		install:jboss:binaries,
		install:jboss:cabio-webapp:re-configure,
		install:jboss:cabio-webapp,
		install:jboss:cabio-webapp:configure,
		install:jboss:configure,
		install:post,
		install:jboss:start
		" />

	<target name="install:tomcat" description="Wrapper scripts that calls all required targets to install the tomcat container" unless="exclude.tomcat"
		depends="
		install:validation:pre-install,
		install:tomcat:stop,
		install:validation:pre-install:ports,
		install:clean:tomcat,
		install:init,
		install:tomcat:binaries,
		install:tomcat:configure,
		install:tomcat:cabio-webapp:re-configure,
		install:tomcat:cabio-webapp,
		install:tomcat:cabio-webapp:configure,
		install:tomcat:grid,
		install:tomcat:grid:configure,
		install:tomcat:start
		" />

	<target name="install" description="Installs and configures JBOSS, creates database, and deploys application" 
		depends="
		install:validation:pre-install,
		install:jboss:stop,
		install:tomcat:stop,
		install:validation:pre-install:ports,
		install:clean,
		install:init,		
		install:tomcat,
		install:jboss,
		install:post,
		install:jboss:start,
		install:validation:post-install
		"/>

	<target name="install:jboss:cabio-webapp:re-configure" description="Update contents of artifacts if not all properties have been externalized, by extracting artifact, modify it as needed and re-archive it." unless="exclude.jboss">
		<!-- This is only required if configuration files are not externalized, below is a sample of what you may do.
		<delete dir="${working.dir}/cabio-webapp"/>
		<unzip src="${cabio-webapp.dir.dist}/${cabio-webapp.war.file}" dest="${working.dir}/cabio-webapp"/>
		<copy todir="${working.dir}/cabio-webapp/WEB-INF/classes" file="${jboss-conf.dir.dest}/hibernate.cfg.xml"/>
		
		<move file="${cabio-webapp.dir.dist}/${cabio-webapp.war.file}" tofile="${cabio-webapp.dir.dist}/${cabio-webapp.war.file}.orig"/>
		<war destfile="${cabio-webapp.dir.dist}/${cabio-webapp.war.file}" compress="false" webxml="${working.dir}/cabio-webapp/WEB-INF/web.xml" >
			<fileset dir="${working.dir}/cabio-webapp">
				<include name="*/**" />
			</fileset>
		</war>  
		-->
	</target>

	<!-- Wrapper target to upgrade jboss container. Does not install or configure binaries -->
	<target name="upgrade:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss"
		depends="
		install:validation:pre-install,
		install:jboss:stop,
		install:init,
		install:jboss:configure,
		install:jboss:cabio-webapp:re-configure,
		install:jboss:cabio-webapp,
		install:jboss:cabio-webapp:configure,
		install:jboss:start
		" />
	<target name="upgrade:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat"
		depends="
		install:validation:pre-install,
		install:tomcat:stop,
		install:init,
		install:tomcat:configure,
		install:tomcat:cabio-webapp:re-configure,
		install:tomcat:cabio-webapp,
		install:tomcat:cabio-webapp:configure,
		install:tomcat:start
		" />

	<target name="upgrade" description="Upgrades JBoss and Database"
		depends="
		upgrade:init,
		install:validation:pre-install,
		install:jboss:stop,
		install:init,
		upgrade:jboss,
		upgrade:tomcat,
		install:validation:post-install
		"/>

	<target name="upgrade-with-dbinstall" description="Upgrades JBoss and Database"
		depends="
		upgrade:init,
		install:validation:pre-install,
		install:jboss:stop,
		install:init,
		install:database,
		upgrade:jboss,
		install:validation:post-install
		"/>

	<target name="upgrade:database" description="Upgrades database using BDA Datbase Upgrade process." unless="exclude.database"
		depends="
		upgrade:init,
		install:init,
		install:database:prep
		">
		<database-upgrade
			database.changelog.file="${os.temp.dir}/${project.name}/db-upgrade.xml"
			/>
		<database-tag/>
	</target>


	<target name="upgrade:database:tag" description="Tags current state of database with a tag to allow for rollback of database to previous versions." unless="exclude.database"
		depends="
		upgrade:init,
		install:init,
		install:database:prep
		">
		<database-tag/>
	</target>

	<target name="upgrade:database:rollback" description="Rolls back database to previous tagged version using rollback scripts." unless="exclude.database"
		depends="
		upgrade:init,
		install:init,
		install:database:prep
		">
		<database-rollback/>
	</target>

	<target name="upgrade:init">
		<jboss-read-dbconfig
			jboss.ds-xml.file="${cabio-webapp.ds.file}"
			/>
		<jboss-read-ldapconfig
			/>
	</target>

	<!-- Targets below are provided to handle tomcat and grid installations, however many projects do not use either of these so they have been moved to the end of the script. -->
	<!-- tomcat targets -->
	<target name="install:tomcat:binaries" description="Install tomcat binaries" unless="exclude.tomcat">
		<delete dir="${tomcat.home}"/>
		<unzip dest="${application.base.path}" src="${tools.dir}/${tomcat.binaries.file}" />
		<if>    
			<os family="unix"/>
			<then>  
				<chmod dir="${tomcat.home}/bin" perm="ugo+rx" 
					includes="**/*.sh"/>
			</then>
		</if>
	</target>

	<target name="install:tomcat:configure" description="Configure tomcat (change ports)" unless="exclude.tomcat">
		<tomcat-configure
			/>
	</target>

	<target name="install:tomcat:stop" description="Stop Tomcat" unless="exclude.tomcat">
		<if>
			<available file="${tomcat.home}/bin/shutdown.sh"/>
			<then>
				<echo message="Shutting down tomcat"/>
				<tomcat-stop tomcat.home="${tomcat.home}"/>
			</then>
			<else>
				<echo message="Tomcat not found , not shutting down tomcat"/>
			</else>
		</if>
	</target>

	<target name="install:tomcat:start" description="Start Tomcat" unless="exclude.tomcat">
		<if>    
			<not>   
				<isset property="exclude.start.servers"/>
			</not>  
			<then>  
				<tomcat-start tomcat.home="${tomcat.home}"/>
			</then> 
		</if>   
	</target>


	<!-- Grid Targets for jboss and tomcat -->

	<target name="install:cabio-grid" description="Wrapper target for Grid application targets"
		depends="install:jboss:grid,
		install:jboss:grid:configure
	"/>

	<target name="install:tomcat:grid" description="Deploy grid to tomcat" unless="exclude.tomcat">
		<mkdir dir="${tomcat.home}/webapps/${grid.dir.dest}"/>
		<unzip dest="${tomcat.home}/common/lib" src="${grid.resource.dir}/${resource.file.jboss-globus-lib}">
			<patternset>
				<exclude name="**/cog-tomcat.jar"/>
			</patternset>
		</unzip>
		<unzip dest="${tomcat.home}/server/lib" src="${grid.resource.dir}/${resource.file.jboss-globus-lib}" >
			<patternset>
				<include name="**/cog-tomcat.jar"/>
			</patternset>
		</unzip>
		<unzip dest="${tomcat.home}/webapps/${grid.dir.dest}" src="${grid.resource.dir}/${resource.file.jboss-globus-war}" />
		<unzip dest="${tomcat.home}/webapps/${grid.dir.dest}" src="${grid.application.dir}/${grid.artifact.file}" />
	</target>

	<target name="install:tomcat:grid:configure" description="Configure tomcat-application" unless="exclude.tomcat">
		<grid-appserver-configure
			appserver.conf.dir="${tomcat.home}/conf"
			appserver.webapp.dir="${tomcat.home}/webapps"
			appserver.server-xml.file="${tomcat.home}/conf/server.xml"
			appserver.server-xml.service.name="Catalina"
			appserver.port.http="${tomcat.port.http}"
			appserver.port.ssl="${tomcat.port.ssl}"
			appserver.hostname="${tomcat.hostname}"
			grid.external.secure.host="${grid.external.secure.host}"
			grid.external.secure.port="${grid.external.secure.port}"
			/>
	</target>

	<target name="install:jboss:grid" description="Deploy  to jboss" unless="exclude.jboss">
		<mkdir dir="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}"/>
		<unzip dest="${jboss.home}/server/${jboss.server.name}/lib" src="${grid.resource.dir}/${resource.file.jboss-globus-lib}" />
		<unzip dest="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}" src="${grid.resource.dir}/${resource.file.jboss-globus-war}" />
		<unzip dest="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}" src="${grid.application.dir}/${grid.artifact.file}" />
	</target>

	<target name="install:jboss:grid:configure" description="Configure tomcat-application" unless="exclude.jboss">
		<grid-appserver-configure
			/>
	</target>

	<target name="install:post" depends="install:post:jboss, install:post:tomcat"/>

	<target name="install:post:jboss" unless="exclude.jboss">


		<if>
			<not>
				<equals arg1="${exclude.jboss.backup}" arg2="true"/>
			</not>
			<then>
				<property name="changelogFile" location="${install-logs.dir}/chagneLog-${install.time}.txt"/>
				<property name="compare1.dir" location="${backup.jboss.base.dir}/backup/${jboss.relative.path}"/>
				<property name="compare2.dir" location="${jboss.home}"/>
				<report-dir-diff
					dir1="${compare1.dir}"
					dir2="${compare2.dir}"
					reportFile="${changelogFile}"
					/>
				<!-- Copy app server logs -->
				<mkdir dir="${jboss.home}/server/${jboss.server.name}/log"/>
				<mkdir dir="${backup.jboss.base.dir}/backup/${jboss.relative.path}/server/${jboss.server.name}/log"/>
				<!-- so the logs wont be included in the zip -->
				<move todir="${jboss.home}/server/${jboss.server.name}/log">
					<fileset dir="${backup.jboss.base.dir}/backup/${jboss.relative.path}/server/${jboss.server.name}/log">
						<include name="*"/>
					</fileset>
				</move>
		
				<!-- Compress backup and cleanup -->
				<mkdir dir="${backup.jboss.base.dir}/backup1"/>
				<zip destfile="${backup.jboss.base.dir}/backup1/${jboss.relative.path}.zip" basedir="${backup.jboss.base.dir}/backup" />
				<delete dir="${backup.jboss.base.dir}/backup"/>
			</then>
		</if>

	</target>

	<target name="install:post:tomcat" unless="exclude.tomcat">
		<!-- Tomcat
		<property name="changelogFile" location="${install-logs.dir}/changeLog-${install.time}.txt"/>
		<property name="compare1.dir" location="${backup.tomcat.dir}/backup/${tomcat.relative.path}"/>
		<property name="compare2.dir" location="${tomcat.home}"/>
		<report-dir-diff
			dir1="${compare1.dir}"
			dir2="${compare2.dir}"
			reportFile="${changelogFile}"
			/>
		
		<mkdir dir="${tomcat.home}/server/${tomcat.server.name}/log"/>
		<mkdir dir="${backup.tomcat.dir}/backup/${tomcat.relative.path}/server/${tomcat.server.name}/log"/>
		<copy todir="${tomcat.home}/server/${tomcat.server.name}/log">
			<fileset dir="${backup.tomcat.dir}/backup/${tomcat.relative.path}/server/${tomcat.server.name}/log">
				<include name="*"/>
			</fileset>
		</copy>
		-->

	</target>
	<target name="install:tomcat:cabio-webapp" description="Deploy cabio-webapp and common libraries to tomcat installation" unless="exclude.tomcat">
		<copy file="${cabio-webapp.dir.dist}/${cabio-webapp.war.file}" todir="${tomcat.home}/webapps" overwrite="true" />
		<!--  Many NCI applications require clm for csm, so you can point this to where you have the version you want to use
		<copy file="${bda-utils.dir}/clm-3.2.jar" todir="${tomcat.home}/server/${tomcat.server.name}/lib" overwrite="true" />
		-->
		<copy file="${database.driver.file}" todir="${tomcat.home}/common/lib" overwrite="true" />
	</target>

	<target name="install:tomcat:cabio-webapp:configure" description="Configure cabio-webapp application, copies over externalized properties or configurations that are not part of the tomcat configuration" unless="exclude.tomcat">
		<!-- configure datasource -->
	</target>
	<target name="install:tomcat:cabio-webapp:re-configure" description="Configure cabio-webapp application, copies over externalized properties or configurations that are not part of the tomcat configuration" unless="exclude.tomcat"/>

      <!-- Assuming the indexes ZIP file has the folder structure as follows:
                         cabioapi/indexes,
                         cabioapi/41/indexes,
                         cabioapi/42/indexes,
                         cabioapi/43/indexes
      -->
      <condition property="cabio-webapp.indexes.dist.dir" value="${basedir}/indexes" >
            <equals arg1="${cabio-webapp.indexfiles.download.during.build}" arg2="true"/>
      </condition>
      <condition property="cabio-webapp.indexes.dist.dir" value="${cabio.deploy.tmp.indexes.dir}" >
            <equals arg1="${cabio-webapp.indexfiles.download.during.build}" arg2="false"/>
      </condition>

      <target name="install:database:indexes" description="Install the index files for FreeStyle Search into the System based on the index and cache paths provided"  depends="install:init,install:cabio-webapp:download:indexfiles" unless="indexfiles.ready">
            <!-- property name="cabio-webapp.indexes.dist.dir" value="${cabio.deploy.tmp.indexes.dir}" / -->
            <delete includeemptydirs="true">
                <fileset dir="${cabio-webapp.index_cache_base.dir}">
                      <include name="40/**" />
                      <include name="41/**" />
                      <include name="42/**" /> 
                      <include name="43/**" />
                </fileset>
            </delete>                         
            <copy todir="${cabio-webapp.index_cache_base.dir}">
                 <fileset dir="${cabio-webapp.indexes.dist.dir}/40">
                      <include name="**/**" />
                 </fileset>  
                 <fileset dir="${cabio-webapp.indexes.dist.dir}">
                      <include name="41/**" />
                      <include name="42/**" />
                      <include name="43/**" />
                 </fileset>  
            </copy>          

            <!-- create the CACHE folder for each version -->
            <mkdir dir="${cabio-webapp.index_cache_base.dir}/cache" />
            <mkdir dir="${cabio-webapp.index_cache_base.dir}/41/cache" />
            <mkdir dir="${cabio-webapp.index_cache_base.dir}/42/cache" />  
            <mkdir dir="${cabio-webapp.index_cache_base.dir}/43/cache" />            
      </target>

       <!-- download the index files from the load server according to which tier it is deploying -->
       <!-- only download it directly from the storage server if configured so --> 
       <target name="install:cabio-webapp:download:indexfiles">
            <if>
                 <equals arg1="${cabio-webapp.indexfiles.download.during.build}" arg2="false"/>
            <then>
                 <delete dir="${cabio.deploy.tmp.indexes.dir}" />
                 <mkdir dir="${cabio.deploy.tmp.indexes.dir}" />
                 <copy todir="${cabio.deploy.tmp.indexes.dir}">
                      <fileset dir="${cabio.loadserver.priv_file_repo.indexfile.dir}">
                           <include name="${cabio.loadserver.indexfile.tier.name}" />
                      </fileset>
                 </copy>
                 <unzip src="${cabio.deploy.tmp.indexes.dir}/${cabio.loadserver.indexfile.tier.name}" dest="${cabio.deploy.tmp.indexes.dir}" />
            </then>            
            <else>
                 <!-- unzip the files to be used -->
                 <unzip src="${cabio-webapp.indexes.dist.dir}/${cabio.loadserver.indexfile.tier.name}" dest="${cabio-webapp.indexes.dist.dir}" /> 
            </else>
            </if>
       </target>

      <!-- bda-utils-1.0.0 changes -->
      <target name="init:common">
		<property name="application.url" value="http://${jboss.server.hostname}:${jboss.server.port}/${bda-blueprints-webapp.name}"/>
		<!-- Conditionals -->
		<available file="${jboss.home}/server/${jboss.server.name}/conf/jboss-service.xml" property="jboss.exists"/>
		<!-- bda-blueprints-webapp can use either Oracle or MySQL or PostgreSQL as its database platform, this is controled by the database.type property.  Based on the value of this property sent several variables for use during install -->
		<echoproperties prefix="database"/>
		<switch value="${database.type}">
			<case value="oracle">
				<property name="database.dialect" value="org.hibernate.dialect.OracleDialect"/>
				<property name="database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.3.0.jar"/>
				<property name="database.driver" value="oracle.jdbc.driver.OracleDriver"/>
				<property name="database.schema" value="${database.name}"/>
			</case>
			<case value="mysql">
				<property name="database.dialect" value="org.hibernate.dialect.MySQLDialect"/>
				<property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.5.jar"/>
				<property name="database.driver" value="com.mysql.jdbc.Driver"/>
				<property name="database.schema" value="${database.name}"/>
			</case>
			<case value="postgresql">
				<property name="database.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
				<property name="database.driver.file" value="${bda-utils.dir}/postgresql-jdbc3-8.3-603.jar"/>
				<property name="database.driver" value="org.postgresql.Driver"/>
				<property name="database.schema" value="public"/>
			</case>
			<default>
				<fail message="Invalid database type ${database.type}"/>
			</default>
		</switch>
	
		<path id="jdbc.driver.classpath">
			<pathelement location="${database.driver.file}"/>
		</path>
	
		<property name="properties.template.file" value="${basedir}/properties.template" />
		<!-- figure out whether to use install-properties.template or upgrade-proprties.template based on the name of the properties file
		<propertyregex property="properties.file.type"
		="${properties.file}"
		=".*(install|upgrade).*"
		="\1"     
			/>              
		<echo message="Properties file type = ${properties.file.type}"/>
		<switch value="${properties.file.type}">
			<case value="install">
				<property name="properties.template.file" value="install-properties.template" />
			</case>         
			<case value="upgrade">
				<property name="properties.template.file" value="upgrade-properties.template" />
			</case>         
			<default>       
				<fail message="Property file name must include 'install' or 'upgrade' so it can be determined which properties template should be used. If you are not certain include 'upgrade' in the name of your proeprties file."/>
			</default>      
		</switch>
		-->
		<filterset id="embedded.filterset">
			<filter token="application.base.path" value="${application.base.path}"/>
			<filter token="application.url" value="${application.url}"/>
			<filter token="database.url" value="${database.url}"/>
			<filter token="database.user" value="${database.user}"/>
			<filter token="database.password" value="${database.password}"/>
			<filter token="database.system.url" value="${database.system.url}"/>
			<!-- added internal properties that may be used in a filtered copy -->
			<filter token="database.driver" value="${database.driver}"/>
			<!-- added for liquibase -->
			<filter token="db-upgrade.run.dir" value="${db-upgrade.dir.dest}/${database.type}"/>
			<filter token="jboss.home" value="${jboss.home}"/>
			<filter token="tomcat.home" value="${tomcat.home}"/>
			<filter token="database.dialect" value="${database.dialect}"/>
			<filter token="hibernate.cfg.file.path" value="${hibernate.cfg.file.path}"/>
			<filter token="env.LOGNAME" value="${env.LOGNAME}"/>
			<filter token="env.JAVA_HOME" value="${env.JAVA_HOME}"/>
			<filter token="project.name" value="project.name"/>
			<filter token="" value=""/>
		</filterset>

		<!-- Added to convert location to file and path -->
		<basename file="${jboss.ssl.keystore.location}" property="jboss.ssl.keystore.file"/>
		<dirname file="${jboss.ssl.keystore.location}" property="jboss.ssl.keystore.dir"/>
		<basename file="${tomcat.ssl.keystore.location}" property="tomcat.ssl.keystore.file"/>
		<dirname file="${tomcat.ssl.keystore.location}" property="tomcat.ssl.keystore.dir"/>
		<basename file="${tomcat.grid.secure.cert.location}" property="tomcat.grid.secure.cert.file"/>
		<dirname file="${tomcat.grid.secure.cert.location}" property="tomcat.grid.secure.dir"/>
		<basename file="${tomcat.grid.secure.key.location}" property="tomcat.grid.secure.key.file"/>
		<basename file="${jboss.grid.secure.cert.location}" property="jboss.grid.secure.cert.file"/>
		<dirname file="${jboss.grid.secure.cert.location}" property="jboss.grid.secure.dir"/>
		<basename file="${jboss.grid.secure.key.location}" property="jboss.grid.secure.key.file"/>
		<!--OS Temp dir -->
		<condition property="os.temp.dir" value="/tmp">
			<or>
				<os family="unix" />
				<os family="mac" />
			</or>
		</condition>
	
		<condition property="os.temp.dir" value="c:/temp">
			<os family="windows" />
		</condition>
	</target>
      <target name="init:install" unless="upgrade.running">
                <property name="install.running" value="true"/>
                <!-- Set application.base.path based on platform -->
                <condition property="application.base.path" value="${application.base.path.linux}">
                        <or>
                                <os family="unix" />
                                <os family="mac" />
                        </or>
                </condition>

                <condition property="application.base.path" value="${application.base.path.windows}">
                        <os family="windows" />
                </condition>
                <echo message="application.base.path=${application.base.path}"/>
                <property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
                <property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>

                <!-- determine if port configurations or port lists are being called -->
                <if>
                        <isset property="jboss.ncicb-standard.port-config"/>
                        <then>
                                <!-- Read some port properties from standard bindings file -->
                                <echo message="Using JBoss NCICB Standard port configurations"/>
                                <property name="jboss.server.binding.template.location" value="${basedir}/${jboss-bindings.file}"/>
                                <jboss-read-ports
                                        jboss.bindings.file.location.property.name="jboss.server.binding.template.location"
                                        />
                                <echo message="http -${jboss.server.port} "/>
                                <echo message="http -${jboss.server.jndi.port} "/>
                                <properties-exist
                                        properties.list="jboss.server.jndi.port,jboss.server.port,jboss.server.ports.name"
                                        />
                                <!-- Make sure there are not unexpanded tokens and that the jboss.server.ports.name is a configuration in the bindings file. -->
                                <jboss-bindings-validate
                                        jboss.server.bindingfile.location="${jboss.server.binding.template.location}"
                                        />
                        </then>
                        <else>
                                <!-- else ensure that all ports are set, since these will be removed from install-properties.template we will verify here.  They have to be removed so the validator works with or without the properties or we have to change the format of the file. -->
                                <echo message="Using custom JBoss port configurations"/>
                                <property name="jboss.server.binding.template.location" value="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings.xml"/>
                                <properties-exist                                        properties.list="jboss.server.jndi.port,jboss.server.port,jboss.cobraorb.port,jboss.ejbinvoker.port,jboss.hajndi.port,jboss.hajrmi.port,jboss.jms.port,jboss.jmx-rmi.port,jboss.messaging.port,jboss.pooledha.port,jboss.remoting.port,jboss.server.bind.port,jboss.server.rmi.port,jboss.service.rmiobject.port,jboss.snmp.port,jboss.snmp-trapd.port,jboss.web.service.port"
                                        />
                        </else>
                </if>
        </target>

</project>
