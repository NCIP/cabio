<?xml version="1.0" encoding="UTF-8"?>

<!--************************************************************************
* This is the a helper build file for the caBIO project that builds the 
* system once the SDK and custom code is in place. Much of this script
* is specific to overrides necessary for caBIO.
*************************************************************************-->
		
<project name="caBIO_API_build" default="build-system" basedir="build">
	
	<description>Helper build script</description>

	<property name="project.home.dir" value=".." />
	<property name="project.build.dir" value="${basedir}" />
	<property name="project.output.dir" value="${project.home.dir}/output" />
	
	<import file="${project.build.dir}/build.xml" />
	
	<property name="custom.src.dir" value="${project.home.dir}/src" />
	<property name="custom.lib.dir" value="${project.home.dir}/lib" />
	<property name="custom.build.dir" value="${project.build.dir}/custom" />
	<property name="custom.classes.dir" value="${custom.build.dir}/build" />

	<property name="custom.jar" value="${PROJECT_NAME}-client-framework.jar" />
	<property name="custom.jar.path" value="${custom.build.dir}/${custom.jar}" />
	<property name="system.jar.path" value="${system.dir}/${system.lib.dir}/${custom.jar}" />

	<property name="indexgen.dir" value="${project.output.dir}/indexgen" />	
	<property name="indexgen.zip.file" value="${PROJECT_NAME}-indexgen.zip" />	
	
	<!-- Override default SDK behavior in the main build target -->
	<target name="build-system" 
	        depends="prepare-system,
	                 package-codegen-artifacts,
	                 Custom.copy-files,
	                 doc,package-system,
	                 Custom.dist"
			description="Generate the entire system">
					
        <!-- 
            Normal build-system dependencies look like this:
            clean,package-codegen-artifacts,doc,package-system
            
            We have modified this as follows:
            
            * clean is gone, for faster rebuilds. It can always be added manually.
            
            * prepare-system comes first because we need the ObjectBridge 
              compiled and available for the bean generation which happens 
              in the next step. 
            
            * package-codegen-artifacts as in the SDK
            
            * Custom.copy-files just copies the custom caBIO jar into the SDK for
              packaging
            
            * Custom.modify-hibernate-config adds listeners for FreestyleLM
            
            * doc,package-system as in the SDK
            
            * Custom-dist copies the packages from the build directory to the 
              caBIO output directory, and also packages the index generator.
         -->
        <SDKecho message="${ant.project.name}: Completed the system build"/>
    </target>
    
	
	<!-- Classpath that includes everything -->
		
    <path id="custom.libs">
        <pathelement location=""/>
        <fileset dir="${custom.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
		<fileset dir="${system.dir}/${system.lib.dir}">
			<include name="*.jar" />
		</fileset>
    	<!-- these jars get generated by prepare-system and prepare-codegen 
    	 	which are called earlier in the build -->
    	<fileset dir="${system.dir}/${system.dist.dir}">
    		<include name="sdk-*.jar" />
    	</fileset>
    	<fileset dir="${codegen.dir}/${codegen.dist.dir}">
    		<include name="sdk-*.jar" />
    	</fileset>
    	<fileset dir="${build.jar.dir}">
    		<include name="*.jar" />
    	</fileset>
    </path>

	<!-- Override default SDK behavior so that hibernate is included in the 
		classpath for our custom hibernate annotations -->
		
	<target name="compile-beans" depends="codegen" description="Compiles the generated beans" >
		<SDKecho message="${ant.project.name}: Compiling the generated beans"/>
		<javac srcdir="${output.src.dir}" destdir="${build.classes.dir}" debug="true">
            <classpath refid="custom.libs"/>
			<include name="**/*.java"/>
		</javac>
	</target>

	<!-- Override default SDK behavior for javadocs to include the project docs -->
	
	<target name="doc" description="Generates javadocs">
		
		<SDKecho message="${ant.project.name}: Generating javadocs"/>
		
		<javadoc destdir="${build.doc.dir}" packagenames="*" 
				classpathref="custom.libs" useexternalfile="yes" 
				windowtitle="caBIO API Documentation">
		    <fileset dir="${output.src.dir}" includes="**/*.java"/>
			<fileset dir="${custom.src.dir}" includes="**/*.java"/>
			<fileset dir="${system.dir}/src" includes="**/*.java"/>
			<link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
		</javadoc>

	</target>
	
	
	<!-- Targets for building and packaging custom code -->
		
    <target name="Custom.clean" 
    		description="Removes generated artifacts">
        <delete dir="${custom.build.dir}" quiet="true"/>   
        <delete dir="${project.output.dir}" quiet="true"/>
    </target>
        	
        	
	<target name="Custom.init" depends="Custom.clean" 
			description="Creates necessary directories">
		<mkdir dir="${project.output.dir}"/>
		<mkdir dir="${custom.build.dir}"/>
		<mkdir dir="${custom.classes.dir}"/>
	</target>
	

    <target name="Custom.build" depends="Custom.init" 
            description="Compiles the custom API">    		
        <javac srcdir="${custom.src.dir}" destdir="${custom.classes.dir}"
        		debug="true" debuglevel="lines,source">
            <classpath refid="custom.libs"/>
        </javac>
    </target>


    <target name="Custom.package.src" depends="Custom.build" 
            description="Creates the custom API jar">
		<jar destfile="${custom.jar.path}" basedir="${custom.classes.dir}">
			<manifest>
				<attribute name="Generated-By" value="caBIO Build"/>
			</manifest>
			<fileset dir="${custom.src.dir}" includes="**/*.java" />
		</jar>
    </target>


    <target name="Custom.copy-files" depends="Custom.package.src"
            description="Copy built jars into the SDK">

        <SDKecho message="Copying generated files to the SDK" />
            
        <!-- copy client jar -->
        <copy tofile="${system.jar.path}"
            file="${custom.jar.path}" />
            
        <!-- copy hibernate jar (annotations) to WS client -->
        <copy todir="${package.client.ws.lib.dir}"
            file="${system.dir}/lib/hibernate-search.jar" />
            
        <!-- copy version.properties to webapp dir -->
        <concat destfile="${system.config.web.classes.dir}/messages.properties"
                append="true">
		    <filelist dir="." files="version.properties"/>
	    </concat>
            
        <!-- copy FreestyleLM configuration for webapp --> 
        <copy todir="${system.config.web.classes.dir}">
            <fileset dir="${project.build.dir}/output/${PROJECT_NAME}/src">
                <include name="indexedFields.properties"/>
            </fileset>
        </copy>  
        
    </target>
    
    
    <target name="Custom.dist">

		<SDKecho message="${ant.project.name}: Creating distribution"/>
			
		<copy todir="${package.client.local.lib.dir}" overwrite="true">
			<fileset file="${system.jar.path}"/>
		</copy>

		<copy todir="${package.client.remote.lib.dir}" overwrite="true">
			<fileset file="${system.jar.path}"/>
		</copy>

		<copy todir="${package.client.remote.lib.dir}" overwrite="true">
			<fileset file="${system.dir}/${system.lib.dir}/dom4j*"/>
		</copy>
				
	  	<copy todir="${project.output.dir}">
	    	<fileset dir="${package.dir}"/>
	  	</copy>

	  	<copy todir="${project.output.dir}/docs">
	    	<fileset dir="${build.doc.dir}"/>
	  	</copy>
    	
		<antcall target="package-indexgen"></antcall>
    	
    </target>
	
	<!-- package index generator -->
	<target name="package-indexgen">
		
		<SDKecho message="${ant.project.name}: Packaging index generator"/>

        <delete dir="${indexgen.dir}" quiet="true"/>
		<mkdir dir="${indexgen.dir}" />
		<mkdir dir="${indexgen.dir}/conf" />
		<mkdir dir="${indexgen.dir}/lib" />
		
		<jar destfile="${indexgen.dir}/lib/${PROJECT_NAME}-indexgen.jar" update="false">
			<manifest>
				<attribute name="Generated-By" value="caCORE SDK Code Generator"/>
				<attribute name="Project-Title" value="${project_name}"/>
				<attribute name="Model-File" value="${model_filename}"/>
				<attribute name="Main-class" value="gov.nih.nci.common.util.search.IndexGenerator"/>
			</manifest>
			<fileset dir="${project.build.dir}/custom/build">
				<include name="**/indexgen/**/*"/>
			</fileset>
			<fileset dir="${project.build.dir}/output/${PROJECT_NAME}/build/classes">
				<include name="**/domain/*"/>
				<include name="**/pathways/*" />
			</fileset>
			<fileset dir="${project.build.dir}/output/${PROJECT_NAME}/src">
				<include name="**/domain/*.hbm.xml"/>				
				<include name="**/pathways/*.hbm.xml"/>
			</fileset>
			<fileset dir="${project.build.dir}/system/build/classes">
				<include name="**/system/util/StringClobType.class"/>							
				<include name="**/system/util/indexgen/ObjectBridge.class"/>											
			</fileset>
		</jar>

		<copy todir="${indexgen.dir}" overwrite="true">
			<fileset dir="${project.home.dir}/conf/indexgen">
				<include name="*.xml"/>
			</fileset>
		</copy>
			
        <replace dir="${indexgen.dir}">
            <replacefilter token="@DISPLAY_VERSION@" value="${DISPLAY_VERSION}" />
        </replace>
            
		<copy todir="${indexgen.dir}/conf" overwrite="true">
			<fileset dir="${project.build.dir}/output/${PROJECT_NAME}/src">
				<include name="indexedFields.properties"/>
				<include name="hibernate.cfg.xml"/>						
			</fileset>		
			<fileset dir="${project.home.dir}/conf/system/web/WEB-INF/classes">
				<include name="searchapiconfig.properties"/>
			</fileset>		
			<fileset dir="${project.home.dir}/conf/indexgen">
				<include name="*.properties"/>																		
			</fileset>
		</copy>
		
		<replace file="${indexgen.dir}/conf/hibernate.cfg.xml" value="">
            <replacetoken><![CDATA[<property name="connection.datasource">java:/cabio</property>]]></replacetoken>
        </replace>
        
		<copy todir="${indexgen.dir}/lib" overwrite="true">
			<fileset dir="${project.build.dir}/system/lib">
				<include name="antlr*.jar"/>
				<include name="log4j*.jar"/>
				<include name="commons-logging*.jar"/>					
				<include name="dom4j*.jar"/>					
				<include name="asm*.jar"/>
				<include name="cglib*.jar"/>
				<include name="commons-*.jar"/>
				<include name="ehcache*.jar"/>
				<include name="jta.jar"/>
				<include name="ojdbc*.jar"/>
				<include name="hibernate*.jar"/>
				<include name="ejb*.jar"/>	
				<include name="lucene*.jar"/>
			</fileset>	
			<fileset dir="${project.build.dir}/output/${PROJECT_NAME}/build/jar">
				<include name="${PROJECT_NAME}-beans.jar"/>
			</fileset>	
		</copy>

	</target>
	
	<!-- Package up the Index Generator codes into zip file for distribution and deployment -->	
	<target name="zip_indexgen" depends="package-indexgen" description="Creates Index generation zip packages">
		<echo message="${ant.project.name}, Index Geneation: Creates Index generation zip packages"/>
		<zip destfile="${indexgen.dir}/${indexgen.zip.file}" whenempty="skip">
			<zipfileset dir="${indexgen.dir}" prefix="${PROJECT_NAME}Indexgen">
				<exclude name="*.zip"/>
			</zipfileset>
		</zip>
	</target>
	
</project>